{"version":3,"sources":["parser/inputTypes.ts","utils/utils.ts","layout/layoutUtils.ts","layout/treeLayout.ts","layout/layoutTypes.ts","layout/arcLayout.ts","styles/useStyles.ts","graph/Graph.tsx","parser/parseUtils.ts","utils/helperComponents.tsx","App.tsx","reportWebVitals.js","index.js"],"names":["InputType","getLabel","type","EdgePairs","WeightedEdgePairs","AdjacencyList","AdjacencyMatrix","GraphObject","BinaryTreeObject","BinaryHeap","LeetcodeTree","getTypeConfig","config","inputType","weighted","directed","oneIndexed","randomInRange","min","max","Math","random","generatePermutations","arr","rtn","permuteHelper","start","length","i","temp","push","convertToEdgeMap","links","edgeMap","link","src","source","trg","target","hasOwnProperty","Set","add","Object","keys","Array","from","deriveStartNode","nodes","nodesWithIn","nodesWithOut","currenNodes","currenNodeList","node","id","has","children","candidates","size","sort","getDisconnectedComponents","startNode","idToNodes","connectedNodeIds","seen","nodeId","collected","dfs","toAdd","c","unshift","isStartNodeInComponent","spacingArray","layoutTree","data","spacing","tree","idToTreeNode","isBinary","isBinaryTree","LayoutUtils","idToNode","rightMostX","disconnectedComponents","comp","actualStartNode","root","constructTreeObject","shiftAmount","runBuchheim","moveSubtree","tNode","realx","Graph","x","realy","y","padding","depth","isRightChild","distanceToMove","rightContour","getContours","r","prevRightContour","child","leftContour","getMinimumShift","val","midpoint","left","right","curr","next","lo","hi","smallerSize","res","l","shift","queue","TreeNode","front","frontVal","value","tempNode","parent","LayoutType","this","arrangeNodesInLine","nodeRtn","arrangeSubGraph","backNodeId","currNodeId","directedEdgeMap","cycleBack","helperArr","bruteForceMinLineCrossings","recurseArr","origin","backNode","currNode","perms","minCrossings","perm","numCrossings","calculateNumCrossings","idToIndex","forward_cnt","back_cnt","childInd","getLayoutLabel","Tree","ForceLayout","TopologicalSort","Arc","Random","performLayout","layoutType","undirectedEdgeMap","y_value","DEFAULT_Y_PADDING","sortedNodeIds","sortedNodes","nid","x_offset","layoutArc","console","error","drawerWidth","useStyles","makeStyles","theme","display","overflow","appBar","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","width","marginLeft","easeOut","enteringScreen","drawer","flexShrink","drawerPaper","drawerHeader","alignItems","mixins","toolbar","justifyContent","drawerHeaderText","menuButton","marginRight","hide","mainContent","flexGrow","contentShift","layoutButton","searchBar","flex","formControl","margin","formControlLabel","selectEmpty","marginTop","sliders","position","zIndex","top","height","layoutError","DEFAULT_LEFT_PADDING","DEFAULT_TOP_PADDING","customNodes","selectedLayout","drawerOpen","searchText","horizontalSpacing","verticalSpacing","classes","React","useState","window","innerHeight","innerWidth","dimensions","setDimensions","oldToNewId","setOldToNewId","useEffect","debouncedHandleResize","fn","ms","timer","_","clearTimeout","setTimeout","debounce","addEventListener","allIds","values","currIdMap","className","Typography","color","variant","graphPaneHeight","graphPaneWidth","n","Utils","extraNodes","label","focusId","myConfig","nodeHighlightBehavior","staticGraphWithDragAndDrop","labelPosition","labelProperty","fontWeight","fontSize","renderLabel","d3","alphaTarget","gravity","linkLength","linkStrength","disableLinkForce","focusZoom","argNodes","argLinks","toLowerCase","trim","fontColor","linksToAdd","key","backKey","focusedNodeId","undefined","processInput","input","options","reverseEdges","Error","slice","nodeSet","startInd","nextOpenBracket","indexOf","nextCloseBracket","pair","getDirectedPair","parsePairs","srcNode","toString","parseArray","ex","parseAdjacencyList","matrix","j","colVal","parseInt","parseAdjacencyMatrix","jsonObj","parseJson","message","parseGraphJSON","parseBinaryTreeJSON","nodeToLabel","sp","split","map","elem","ind","trimmed","cleanseInput","leftChildInd","rightChildInd","targetId","parseBinaryHeap","parseLeetcodeTree","s","charAt","LabelWithTooltip","tooltipText","inputRef","onClick","current","focus","Tooltip","style","title","placement","Help","green","lightGrey","ColorButton","withStyles","palette","getContrastText","backgroundColor","Button","SelectedButton","DEFAULT_INPUT_TYPE","DEFAULT_LAYOUT_TYPE","App","setDrawerOpen","inputValue","setInputValue","comboValue","setComboValue","setDirected","setOneIndexed","setReverseEdges","setCustomNodes","allNodes","setAllNodes","setStartNode","graphInputError","setGraphInputError","customNodesInputError","setCustomNodesInputError","customNodeSet","setCustomNodeSet","setData","setSelectedLayout","searchInputValue","setSearchInputValue","setSearchText","graphInputRef","useRef","customNodesInputRef","reverseRef","verticalSlider","setVerticalSlider","horizontalSlider","setHorizontalSlider","parsedValue","ParseUtils","reverseChanged","allNodesSet","tempAllNodes","CssBaseline","AppBar","clsx","Toolbar","IconButton","edge","Menu","noWrap","filter","k","currLayoutType","onChange","newValue","onRequestSearch","onCancelSearch","placeholder","Drawer","anchor","open","paper","ChevronLeft","Divider","FormControl","TextField","InputLabelProps","pointerEvents","multiline","rows","rowsMax","event","helperText","InputLabel","Select","labelId","e","a","b","localeCompare","MenuItem","FormControlLabel","control","Checkbox","checked","name","Autocomplete","renderInput","params","gutterBottom","Slider","step","marks","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mLAAYA,E,0GAWH,SAASC,EAASC,GACvB,OAAQA,GACN,KAAKF,EAAUG,UACb,MAAO,YACT,KAAKH,EAAUI,kBACb,MAAO,qBACT,KAAKJ,EAAUK,cACb,MAAO,iBACT,KAAKL,EAAUM,gBACb,MAAO,mBACT,KAAKN,EAAUO,YACb,MAAO,eACT,KAAKP,EAAUQ,iBACb,MAAO,qBACX,KAAKR,EAAUS,WACb,MAAO,sBACT,KAAKT,EAAUU,aACb,MAAO,wBACP,QACE,MAAO,eAIN,SAASC,EAAcT,GAC5B,IAAMU,EAAS,CACbC,UAAWX,EACXY,UAAU,EACVC,UAAU,EACVC,YAAY,GAEd,OAAQd,GACN,KAAKF,EAAUI,kBACbQ,EAAOE,UAAW,EAKtB,OAAOF,EChDJ,SAASK,EAAcC,EAAaC,GACvC,OAAOC,KAAKC,UAAYF,EAAID,GAAKA,EAI9B,SAASI,EAAqBC,GACjC,IAAIC,EAAkB,GAEtB,OADAC,EAAcF,EAAK,EAAGC,GACfA,EAET,SAASC,EAAcF,EAAeG,EAAeF,GACnD,GAAIE,IAAUH,EAAII,OAAS,EAA3B,CAIAF,EAAcF,EAAKG,EAAQ,EAAGF,GAC9B,IAAK,IAAII,EAAIF,EAAQ,EAAGE,EAAIL,EAAII,OAAQC,IAAK,CAC3C,IAAIC,EAAON,EAAIK,GACfL,EAAIK,GAAKL,EAAIG,GACbH,EAAIG,GAASG,EAEbJ,EAAcF,EAAKG,EAAQ,EAAGF,GAE9BK,EAAON,EAAIK,GACXL,EAAIK,GAAKL,EAAIG,GACbH,EAAIG,GAASG,QAbbL,EAAIM,KAAJ,YAAaP,ICJZ,SAASQ,EAAiBC,EAA+BjB,GAC9D,IAD0F,EACpFkB,EAAe,GADqE,cAEvED,GAFuE,IAE1F,2BAA0B,CAAC,IAAhBE,EAAe,QAClBC,EAAMD,EAAKE,OACXC,EAAMH,EAAKI,OACbvB,GACGkB,EAAQM,eAAeJ,KAC1BF,EAAQE,GAAO,IAEjBF,EAAQE,GAAKL,KAAKO,KAEbJ,EAAQM,eAAeJ,KAC1BF,EAAQE,GAAO,IAAIK,KAErBP,EAAQE,GAAKM,IAAIJ,GAEZJ,EAAQM,eAAeF,KAC1BJ,EAAQI,GAAO,IAAIG,KAErBP,EAAQI,GAAKI,IAAIN,KAnBqE,8BAuB1F,IAAKpB,EACH,cAAgB2B,OAAOC,KAAKV,GAA5B,eAAsC,CAAjC,IAAIE,EAAG,KACVF,EAAQE,GAAOS,MAAMC,KAAKZ,EAAQE,IAGtC,OAAOF,EAOF,SAASa,EAAgBC,EAAYd,GAC1C,IADoE,EAC9De,EAAc,IAAIR,IAClBS,EAAe,IAAIT,IACnBU,EAAc,IAAIV,IAClBW,EAAiB,GAJ6C,cAKnDJ,GALmD,IAKpE,2BAAwB,CAAC,IAAhBK,EAAe,QACtBF,EAAYT,IAAIW,EAAKC,IACrBF,EAAerB,KAAKsB,EAAKC,KAPyC,8BAUpE,cAAgBX,OAAOC,KAAKV,GAA5B,eAAsC,CAAjC,IAAIE,EAAG,KACV,GAAIe,EAAYI,IAAInB,GAAM,CACxBc,EAAaR,IAAIN,GACjB,IAFwB,EAElBoB,EAAWtB,EAAQE,GAFD,cAGRoB,GAHQ,IAGxB,2BAA0B,CAAC,IAAlBlB,EAAiB,QACxBW,EAAYP,IAAIJ,IAJM,gCAU5B,IArBoE,EAqBhEmB,EAAa,IAAIhB,IArB+C,cAsBnDO,GAtBmD,IAsBpE,2BAAwB,CAAC,IAAhBK,EAAe,SACjBJ,EAAYM,IAAIF,EAAKC,KAAOJ,EAAaK,IAAIF,EAAKC,KACrDG,EAAWf,IAAIW,EAAKC,KAxB4C,8BA4BpE,GAAIG,EAAWC,KAAO,EAAG,CACvB,IAAMlC,EAAMqB,MAAMC,KAAKW,GAEvB,OADAjC,EAAImC,OACGnC,EAAI,GAIb,GAA0B,IAAtB0B,EAAaQ,KAEf,OADAN,EAAeO,OACRP,EAAe,GAIxB,IAAM5B,EAAMqB,MAAMC,KAAKI,GAEvB,OADA1B,EAAImC,OACGnC,EAAI,GAwBN,SAASoC,EACdZ,EACAf,EACA4B,GAEA,IADA,EACMC,EAAgD,GADtD,cAEiBd,GAFjB,IAEA,2BAAwB,CAAC,IAAhBK,EAAe,QACtBS,EAAUT,EAAKC,IAAMD,GAHvB,8BAKA,IALA,EAKM5B,EAAqC,GAErCsC,EAAmB,IAAItB,IAP7B,cAQiBR,GARjB,IAQA,2BAAwB,CAAC,IAAhBE,EAAe,QACtB4B,EAAiBrB,IAAIP,EAAKE,QAC1B0B,EAAiBrB,IAAIP,EAAKI,SAV5B,8BAeA,IAFA,IAAML,EAAmBF,EAAiBC,GAAO,GAC3C+B,EAAO,IAAIvB,IACjB,MAAmBI,MAAMC,KAAKiB,GAA9B,eAAiD,CAA5C,IAAIE,EAAM,KACb,IAAKD,EAAKT,IAAIU,GAAS,CACrB,IAAMC,EAAY,IAAIzB,IACtB0B,EAAIF,EAAQ/B,EAAS8B,EAAME,GAG3B,IADA,IAAME,EAAgC,GACtC,MAAcvB,MAAMC,KAAKoB,GAAzB,eAAqC,CAAhC,IAAIG,EAAC,KACRD,EAAMrC,KAAK+B,EAAUO,IAGnBR,GAAaK,EAAUX,IAAIM,GAC7BpC,EAAI6C,QAAQF,GAEZ3C,EAAIM,KAAKqC,IAKf,OAAO3C,EAET,SAAS0C,EAAIF,EAAgB/B,EAAkB8B,EAAmBE,GAChE,IAAIF,EAAKT,IAAIU,GAAb,CACAD,EAAKtB,IAAIuB,GACTC,EAAUxB,IAAIuB,GACd,IAAMT,EAAWtB,EAAQ+B,GACzB,GAAKT,EAAL,CALwF,oBAMtEA,GANsE,IAMxF,2BAA4B,CAC1BW,EAD0B,QACfjC,EAAS8B,EAAME,IAP4D,iCAWnF,SAASK,EAAuBV,EAAmBb,GAAgC,IAAD,gBACtEA,GADsE,IACvF,2BAAwB,CACtB,GADsB,QACbM,KAAOO,EAAW,OAAO,GAFmD,8BAIvF,OAAO,G,SFpKG5D,O,yBAAAA,I,yCAAAA,I,iCAAAA,I,qCAAAA,I,6BAAAA,I,uCAAAA,I,2BAAAA,I,gCAAAA,M,kBGQNuE,EAAe,CAAC,GAAI,GAAI,GAAI,IAAK,KAchC,SAASC,EAAWC,EAAkB5D,EAAmB6D,GAC9D,IAAMd,EAA0Da,EAA1Db,UAAWb,EAA+C0B,EAA/C1B,MAAOf,EAAwCyC,EAAxCzC,MAAOjB,EAAiC0D,EAAjC1D,SAAU4D,EAAuBF,EAAvBE,KAAMC,EAAiBH,EAAjBG,aAC3CC,EAVN,SAAsBhE,GACpB,OACEA,IAAcb,EAAUQ,kBACxBK,IAAcb,EAAUS,YACxBI,IAAcb,EAAUU,aAMXoE,CAAajE,GACvBgE,IACH9D,GAAW,GAGb,IAPgG,EAO1FkB,EAAU8C,EAA6B/C,IAASjB,GAClDiE,EAAqB,GAErBC,EAAa,EACXC,EAAyBH,EAAsChC,EAAOf,EAAO4B,GAXa,cAa/EsB,GAb+E,IAahG,2BAAyC,CAAC,IAAjCC,EAAgC,QAEnCC,EAAiC,KACjCxB,GAAaA,EAAUjC,OAAS,GAC9BoD,EAAmCnB,EAAWuB,KAChDC,EAAkBxB,GAGjBwB,IACHA,EAAkBL,EAA4BI,EAAMlD,IAIxD,IAAIoD,EAAOV,EACPA,IACFK,EAAWJ,GAERS,IACJA,EAAOC,EAAoBrD,EAASmD,EAAiBJ,IAGvD,IAAIO,EAAcN,EAAa,EAAIA,EAlDK,GAkD2C,EACnFA,EAAaO,EAAYH,EApDF,GAoDyBR,EAAU,GAC1DY,EAAYJ,EAAME,IApC+E,kDAwC/ExC,GAxC+E,IAwChG,2BAAwB,CAAC,IAAhBK,EAAe,QAGhBsC,EAAQV,EADC5B,EAAKC,IAEpB,GAAIqC,EAAO,CACT,IAAIC,EAAQC,EAA6B,EAAIrB,EAAaG,EAAQmB,GAAKH,EAAMG,EACzEC,EAAQF,EAA4BrB,EAAaG,EAAQqB,GAAKL,EAAMK,EACxE3C,EAAKyC,EAAIF,EACTvC,EAAK2C,EAAID,IAhDmF,+BAqDlG,SAASN,EAAYH,EAAgBW,EAAiBnB,EAAmBoB,GAGvE,GADAZ,EAAKU,EAAIE,EACoB,IAAzBZ,EAAK9B,SAAS5B,OAGhB,OADA0D,EAAKQ,EAAI,EACFR,EAAKQ,EAId,GAA6B,IAAzBR,EAAK9B,SAAS5B,OAAc,CAG9B,GAFA6D,EAAYH,EAAK9B,SAAS,GAAIyC,EAASnB,EAAUoB,EAAQ,GACzDZ,EAAKQ,EAAIR,EAAK9B,SAAS,GAAGsC,EACtBhB,EACF,GAAIQ,EAAK9B,SAAS,GAAG2C,aAAc,CACjC,GAAIb,EAAK9B,SAAS,GAAGsC,EAAI,GAAK,CAC5B,IAAMM,EAAiB,GAAMd,EAAK9B,SAAS,GAAGsC,EAC9CJ,EAAYJ,EAAK9B,SAAS,GAAI4C,GAEhCd,EAAKQ,EAAIR,EAAK9B,SAAS,GAAGsC,EAAI,QAG9BR,EAAKQ,EAAIR,EAAK9B,SAAS,GAAGsC,EAAI,GAGlC,IAf8B,EAe1BO,EAAeC,EAAYhB,GAAM,GACjCJ,EAAaI,EAAKQ,EAhBQ,cAiBhBO,GAjBgB,IAiB9B,2BAA4B,CAAC,IAApBE,EAAmB,QAC1BrB,EAAa7D,KAAKD,IAAI8D,EAAYqB,IAlBN,8BAoB9B,OAAOrB,EAGT,IAjCsF,EAiClFsB,EAAkC,GAjCgD,cAmCpElB,EAAK9B,UAnC+D,IAmCtF,2BAAiC,CAAC,IAAzBiD,EAAwB,QAC/BhB,EAAYgB,EAAOR,EAASnB,EAAUoB,EAAQ,GAC9C,MAAkCI,EAAYG,GAA9C,mBAAKC,EAAL,KAAkBL,EAAlB,KACA,GAAII,IAAUnB,EAAK9B,SAAS,GAAI,CAG9BkC,EAAYe,EAFKE,EAAgBH,EAAkBE,EAAaT,IADlC,MAIAK,EAAYG,GAJZ,mBAI7BC,EAJ6B,KAIhBL,EAJgB,KAMhC,IAAK,IAAIxE,EAAI,EAAGA,EAAI2E,EAAiB5E,OAAQC,IAAK,CAChD,IAAM+E,EAAMJ,EAAiB3E,GACzBA,GAAKwE,EAAazE,OACpByE,EAAatE,KAAK6E,GAElBP,EAAaxE,GAAKR,KAAKD,IAAIiF,EAAaxE,GAAI+E,GAGhDJ,EAAmBH,GApDiE,8BAwDtF,IAAMQ,GAAYvB,EAAK9B,SAAS,GAAGsC,EAAIR,EAAK9B,SAAS8B,EAAK9B,SAAS5B,OAAS,GAAGkE,GAAK,EACpFR,EAAKQ,EAAIe,EAGT,IA5DsF,EA4DlF3B,EAAaI,EAAKQ,EA5DgE,cA6DxEU,GA7DwE,IA6DtF,2BAAgC,CAAC,IAAxBD,EAAuB,QAC9BrB,EAAa7D,KAAKD,IAAI8D,EAAYqB,IA9DkD,8BAgEtF,OAAOrB,EAGT,SAASoB,EAAYhB,GAMnB,IAJA,IAAMwB,EAAsB,GACtBC,EAAuB,GAEzBC,EAAO,CAAC1B,GACL0B,EAAKpF,OAAS,GAAG,CACtB,IADsB,EAClBqF,EAAwB,GACxBC,EAAK,UACLC,GAAM,UAHY,cAILH,GAJK,IAItB,2BAAuB,CAAC,IAAD,EAAd3D,EAAc,sBACHA,EAAKG,UADF,IACrB,2BAAiC,CAAC,IAAzBiD,EAAwB,QAC/BQ,EAAKlF,KAAK0E,IAFS,8BAIrBS,EAAK7F,KAAKF,IAAI+F,EAAI7D,EAAKyC,GACvBqB,EAAK9F,KAAKD,IAAI+F,EAAI9D,EAAKyC,IATH,8BAWtBgB,EAAK/E,KAAKmF,GACVH,EAAMhF,KAAKoF,GACXH,EAAOC,EAET,MAAO,CAACH,EAAMC,GAGhB,SAASJ,EAAgBN,EAA6BK,EAA4BT,GAChF,GAA4B,IAAxBI,EAAazE,QAAuC,IAAvB8E,EAAY9E,OAAc,OAAO,EAClE,IAAMwF,EAAc/F,KAAKF,IAAIkF,EAAazE,OAAQ8E,EAAY9E,QAC1DyF,EAAM,EACNX,EAAY,GAAKL,EAAa,GAAK,IACrCgB,EAAM,GAAKX,EAAY,GAAKL,EAAa,KAE3C,IAAK,IAAIxE,EAAI,EAAGA,EAAIuF,EAAavF,IAAK,CACpC,IAAMyF,EAAIjB,EAAaxE,GACjB0E,EAAIG,EAAY7E,GAClB0E,EAAIe,EAAIrB,IACVoB,EAAMhG,KAAKD,IAAIiG,EAAKpB,GAAWM,EAAIe,KAGvC,OAAOD,EAGT,SAAS3B,EAAYJ,EAAgBiC,GACnCjC,EAAKQ,GAAKyB,EADwC,oBAEhCjC,EAAK9B,UAF2B,IAElD,2BAAiC,CAC/BkC,EAD+B,QACZ6B,IAH6B,+BAQpD,SAAShC,EACPrD,EACA2B,EACAoB,GAGA,IAAIuC,EAAyB,GACzBlC,EAAO,IAAImC,EAAS5D,GACxB2D,EAAMzF,KAAKuD,GACX,IAAItB,EAAO,IAAIvB,IAIf,IAHAuB,EAAKtB,IAAImB,GACToB,EAASpB,GAAayB,EAEfkC,EAAM5F,OAAS,GAAG,CACvB,IAAI8F,EAAkBF,EAAMD,QACxBI,EAAWD,EAAME,MAGrB,GAAK1F,EAAQM,eAAemF,IAA0C,IAA7BzF,EAAQyF,GAAU/F,OAA3D,CAIA,IATuB,EASnB4B,EAAWtB,EAAQyF,GATA,cAULnE,GAVK,IAUvB,2BAA4B,CAAC,IAApBiD,EAAmB,QAC1B,IAAIzC,EAAKT,IAAIkD,GAAb,CACAzC,EAAKtB,IAAI+D,GACT,IAAIoB,EAAW,IAAIJ,EAAShB,GAC5BiB,EAAMlE,SAASzB,KAAK8F,GACpBA,EAASC,OAASJ,EAClBF,EAAMzF,KAAK8F,GAEX5C,EAASwB,GAASoB,IAlBG,gCAqBzB,OAAOvC,EAcF,IC1OKyC,ED0OCN,EACX,WAAYG,GAAsC,IAAvBzB,EAAsB,4EAC/C6B,KAAKJ,MAAQA,EACbI,KAAKxE,SAAW,GAChBwE,KAAKF,OAAS,KACdE,KAAKlC,EAAI,EACTkC,KAAKhC,EAAI,EACTgC,KAAK7B,aAAeA,GE9OlB3B,EAAe,CAAC,GAAI,GAAI,GAAI,GAAI,KAoDtC,SAASyD,EACPjF,EACAa,GAEA,IADwB,EAClBK,EAA2B,GAC3BmD,EAAqB,GACrBpC,EAAgB,GAHE,cAIPjC,GAJO,IAIxB,2BAAwB,CAAC,IAAhBK,EAAe,QACtB4B,EAAS5B,EAAKC,IAAMD,EAChBQ,GAAaA,IAAcR,EAAKC,GAClC+D,EAAItF,KAAK8B,GAETK,EAAUnC,KAAKsB,EAAKC,KATA,8BAYxBY,EAAUP,OACV,cAAmBO,EAAnB,eAA8B,CAAzB,IAAID,EAAM,KACboD,EAAItF,KAAKkC,GAGX,IADA,IAAMiE,EAAU,GAChB,MAAmBb,EAAnB,eAAwB,CAAnB,IAAIpD,EAAM,KACbiE,EAAQnG,KAAKkD,EAAShB,IAExB,OAAOiE,EAKT,SAASC,EACPjG,EACAkG,EACAC,EACAC,GAEA,IAAKpG,EAAQmG,IAA8C,IAA/BnG,EAAQmG,GAAYzG,OAC9C,MAAO,CAACyG,GAGV,IALA,EAKIhB,EAAM,CAACgB,GAEP7E,EAAWtB,EAAQmG,GACnBrE,EAAO,IAAIvB,IARf,cASkBe,GATlB,IASA,2BAA4B,CAAC,IAApBiD,EAAmB,QAE1B,GAAIA,IAAU2B,IAAcpE,EAAKT,IAAIkD,GAArC,CAMA,IAAIvC,EAAY,IAAIzB,IAChB8F,EAAY,EAAC,GAGjB,GAFApE,EAAIjC,EAAS8B,EAAME,EAAWqE,EAAWF,EAAYA,EAAY5B,GAE5D8B,EAAU,GAKR,CACL,IADK,EACDC,EAAYC,EACdH,EACAzF,MAAMC,KAAKoB,GACXmE,GAJG,cAOcG,GAPd,IAOL,2BAA8B,CAAC,IAAtBvE,EAAqB,QACxBA,IAAWoE,GAAYhB,EAAItF,KAAKkC,IARjC,mCALY,CACjB,IADiB,EACbyE,EAAaP,EAAgBjG,EAASmG,EAAY5B,EAAO6B,GAD5C,cAEEI,GAFF,IAEjB,2BAA+B,CAAC,IAAvBzE,EAAsB,QAC7BoD,EAAItF,KAAKkC,IAHM,kCArBrB,8BAsCA,OAAOoD,EAKT,SAASlD,EACPjC,EACA8B,EACAE,EACAqE,EACAI,EACAC,EACAC,GAKA,GAFA7E,EAAKtB,IAAImG,GACT3E,EAAUxB,IAAImG,GACT3G,EAAQ2G,IAA0C,IAA7B3G,EAAQ2G,GAAUjH,OAA5C,CAMA,IAVA,EAUI4B,EAAWtB,EAAQ2G,GAVvB,cAWkBrF,GAXlB,IAWA,2BAA4B,CAAC,IAApBiD,EAAmB,QACtBA,IAAUmC,IACVnC,IAAUkC,EAIV3E,EAAKT,IAAIkD,IACbtC,EAAIjC,EAAS8B,EAAME,EAAWqE,EAAWI,EAAQE,EAAUpC,GAJzD8B,EAAU,IAAK,IAdnB,gCAsBF,SAASE,EACPH,EACApE,EACAyE,GAEA,GAAIzE,EAAUtC,OAAS,EAErB,OADAsC,EAAUP,OACHO,EAIT,IAPA,EAOI4E,EAAQvH,EAAqB2C,GAC7BmD,EAAMyB,EAAM,GACZC,EAAe,OATnB,cAUiBD,GAVjB,IAUA,2BAAwB,CAAC,IAAhBE,EAAe,QAClBC,EAAeC,EAAsBZ,EAAiBU,EAAML,GAKhE,GAJIM,EAAeF,IACjBA,EAAeE,EACf5B,EAAM2B,GAEa,IAAjBD,EAAoB,OAhB1B,8BAkBA,OAAO1B,EAET,SAAS6B,EACPZ,EACAU,EACAL,GAEA,IAAIQ,EAAiB,GACrBA,EAAUR,IAAW,EAGrB,IAFA,IAAIS,EAAc,GACdC,EAAW,GACNxH,EAAI,EAAGA,EAAImH,EAAKpH,OAAQC,IAC/BuH,EAAYrH,KAAK,GACjBsH,EAAStH,KAAK,GACdoH,EAAUH,EAAKnH,IAAMA,EAGvB,IAXQ,EAWJwF,EAAM,EAEN7D,EAAW8E,EAAgBK,GAAUL,EAAgBK,GAAU,GAb3D,cAcUnF,GAdV,IAcR,2BAA4B,CAC1B4F,EAAYD,EADc,WACO,GAf3B,8BAkBR,IAAK,IAAItH,EAAI,EAAGA,EAAImH,EAAKpH,OAAQC,IAE/B,GADA2B,EAAW8E,EAAgBU,EAAKnH,IAChC,CAFoC,oBAGlB2B,GAHkB,IAGpC,2BAA4B,CAAC,IACrB8F,EAAWH,EADS,SAG1B,GAAIG,EAAWzH,EAEb,IAAK,IAAIiE,EAAIjE,EAAI,EAAGiE,EAAIwD,EAAUxD,IAC5BsD,EAAYtD,KAAIuB,GAAO+B,EAAYtD,SAIzC,IAAK,IAAIA,EAAIjE,EAAI,EAAGiE,EAAIwD,EAAUxD,IAC5BuD,EAASvD,KAAIuB,GAAOgC,EAASvD,KAdH,kDAoBlBtC,GApBkB,IAoBpC,2BAA4B,CAAC,IACrB8F,EAAWH,EADS,SAEtBG,EAAWzH,EACbuH,EAAYE,IAAa,EAGzBD,EAASxH,IAAM,GA1BiB,+BA8BtC,OAAOwF,EDrOF,SAASkC,EAAepJ,GAC7B,OAAQA,GACN,KAAK4H,EAAWyB,KACd,MAAO,OACT,KAAKzB,EAAW0B,YACd,MAAO,iBACT,KAAK1B,EAAW2B,gBACd,MAAO,mBACT,KAAK3B,EAAW4B,IACd,MAAO,MACT,KAAK5B,EAAW6B,OACd,MAAO,SACT,QACE,MAAO,eAsBN,SAASC,EACdC,EACApF,EACA5D,EACA6D,GAEA,OAAQmF,GACN,KAAK/B,EAAWyB,KACd,OAAO/E,EAAWC,EAAM5D,EAAW6D,GACrC,KAAKoD,EAAW4B,IACd,OC9CC,SAAmBjF,EAAkBC,GAC1C,IAD6E,EACvEd,EAA4Ba,EAA5Bb,UAAWb,EAAiB0B,EAAjB1B,MAAOf,EAAUyC,EAAVzC,MAElBkD,EAAyBH,EAAsChC,EAAOf,EAAO4B,GAC7EyE,EAAkBtD,EAA6B/C,GAAO,GACtD8H,EAAoB/E,EAA6B/C,GAAO,GAE1D+H,EAAUnE,EAA4BoE,GAPmC,cAS5D9E,GAT4D,IAS7E,2BAAyC,CAAC,IAAjCC,EAAgC,QACnCC,OAAmC,EACnCxB,GAAaA,EAAUjC,OAAS,GAC9BoD,EAAmCnB,EAAWuB,KAChDC,EAAkBxB,GAGjBwB,IACHA,EAAkB4C,EAAmB7C,EAAMC,GAAiB,GAAG/B,IAGjE,IAXuC,EAWnC4G,EAAgB/B,EAClB4B,EACA,wBACA1E,EACAiD,GAEErD,EAAgB,GAjBmB,cAkBtBjC,GAlBsB,IAkBvC,2BAAwB,CAAC,IAAhBK,EAAe,QACtB4B,EAAS5B,EAAKC,IAAMD,GAnBiB,8BAqBvC,IArBuC,EAqBnC8G,EAAc,GArBqB,cAsBvBD,GAtBuB,IAsBvC,2BAA+B,CAAC,IAAvBE,EAAsB,QAC7BD,EAAYpI,KAAKkD,EAASmF,KAvBW,8BA4BvC,IADA,IAAIC,EAAWxE,EAA6B,EAC5C,MAAiBsE,EAAjB,eAA8B,CAAzB,IAAI9G,EAAI,KACXA,EAAKyC,EAAIuE,EACThH,EAAK2C,EAAIgE,EACTK,GAAY7F,EAAaG,EAAQmB,GAEnCkE,GAAWC,KA1CgE,+BD8ClEK,CAAU5F,EAAMC,GACzB,KAAKoD,EAAW0B,YAGhB,KAAK1B,EAAW6B,OAEd,OACF,QAEE,YADAW,QAAQC,MAAM,2B,SA7DRzC,O,eAAAA,I,6BAAAA,I,qCAAAA,I,aAAAA,I,oBAAAA,M,2BEHN0C,EAAc,IAEPC,EAAYC,aAAW,SAAAC,GAAK,MAAK,CAE5CtF,KAAM,CACJuF,QAAS,OACTC,SAAU,UAEZC,OAAQ,CACNC,WAAYJ,EAAMK,YAAYC,OAAO,CAAC,SAAU,SAAU,CACxDC,OAAQP,EAAMK,YAAYE,OAAOC,MACjCC,SAAUT,EAAMK,YAAYI,SAASC,iBAGzCC,YAAa,CACXC,MAAM,eAAD,OAAiBf,EAAjB,OACLgB,WAAYhB,EACZO,WAAYJ,EAAMK,YAAYC,OAAO,CAAC,SAAU,SAAU,CACxDC,OAAQP,EAAMK,YAAYE,OAAOO,QACjCL,SAAUT,EAAMK,YAAYI,SAASM,kBAGzCC,OAAQ,CACNJ,MAAOf,EACPoB,WAAY,GAEdC,YAAa,CACXN,MAAOf,GAETsB,aAAa,yBACXlB,QAAS,OACTmB,WAAY,SACZ/F,QAAS2E,EAAMjG,QAAQ,EAAG,IAEvBiG,EAAMqB,OAAOC,SALN,IAMVC,eAAgB,aAElBC,iBAAkB,CAChBZ,MAAO,QAETa,WAAY,CACVC,YAAa1B,EAAMjG,QAAQ,IAE7B4H,KAAM,CACJ1B,QAAS,QAEX2B,YAAa,CACXC,SAAU,EACVxG,QAAS2E,EAAMjG,QAAQ,GACvBqG,WAAYJ,EAAMK,YAAYC,OAAO,SAAU,CAC7CC,OAAQP,EAAMK,YAAYE,OAAOC,MACjCC,SAAUT,EAAMK,YAAYI,SAASC,gBAEvCG,YAAY,KAEdiB,aAAc,CACZ1B,WAAYJ,EAAMK,YAAYC,OAAO,SAAU,CAC7CC,OAAQP,EAAMK,YAAYE,OAAOO,QACjCL,SAAUT,EAAMK,YAAYI,SAASM,iBAEvCF,WAAY,GAEdkB,aAAc,CACZlB,WAAY,GACZa,YAAa,GAEfM,UAAW,CACT/B,QAAS,OACTgC,KAAM,EACNV,eAAgB,YAIlBW,YAAa,CACXC,OAAQnC,EAAMjG,QAAQ,GACtB6G,MAAM,eAAD,OAAiB,GAAjB,QAEPwB,iBAAkB,CAChBvB,YAAa,GAEfwB,YAAa,CACXC,UAAWtC,EAAMjG,QAAQ,IAG3BwI,QAAS,CACPC,SAAU,WACVC,OAAQ,IACRC,IAAK,GACLvG,MAAO,GACPwG,OAAQ,KAEVC,YAAa,CACXlB,YAAa,S,OCrFJmB,EAAuB,IAEvBC,EAAsB,GA4BnC,IAsMe7H,EAtMD,SAAC,GAYI,IAXjB/E,EAWgB,EAXhBA,UACA4D,EAUgB,EAVhBA,KAEA1D,GAQgB,EAThBsC,GASgB,EARhBtC,UACA2M,EAOgB,EAPhBA,YACA9J,EAMgB,EANhBA,UACA+J,EAKgB,EALhBA,eACAC,EAIgB,EAJhBA,WACAC,EAGgB,EAHhBA,WACAC,EAEgB,EAFhBA,kBACAC,EACgB,EADhBA,gBAEMC,EAAUvD,IAGhB,EAAoCwD,IAAMC,SAAS,CACjDZ,OAAQa,OAAOC,YACf7C,MAAO4C,OAAOE,aAFhB,mBAAOC,EAAP,KAAmBC,EAAnB,KAKA,EAAoCN,IAAMC,SAAoC,IAA9E,mBAAOM,EAAP,KAAmBC,EAAnB,KAkCA,GAhCAR,IAAMS,WAAU,WACd,IAAMC,EAnCV,SAAkBC,EAASC,GACzB,IAAIC,EACJ,OAAO,SAACC,GACNC,aAAaF,GACbA,EAAQG,YAAW,SAAAF,GACjBD,EAAQ,KACRF,MACCC,IA4B2BK,EAAS,WACrCX,EAAc,CACZjB,OAAQa,OAAOC,YACf7C,MAAO4C,OAAOE,eAEf,KACHF,OAAOgB,iBAAiB,SAAUR,MAIpCV,IAAMS,WAAU,WACd,IADoB,EACdU,EAAS,IAAI5M,IAAYE,OAAO2M,OAAOb,IACvCc,EAAuC,GAFzB,cAGH7K,EAAK1B,OAHF,IAGpB,2BAA6B,CAAC,IACxBiB,EADuB,QACTX,GACd+L,EAAO9L,IAAIU,GACbsL,EAAUtL,GAAUA,EAAS,KAE7BsL,EAAUtL,GAAUA,GARJ,8BAWpB,cAAmBpB,MAAMC,KAAK6K,GAA9B,eAA4C,CAAvC,IAAI1J,EAAM,KACToL,EAAO9L,IAAIU,GACbsL,EAAUtL,GAAUA,EAAS,KAE7BsL,EAAUtL,GAAUA,EAGxByK,EAAca,KACb,CAAC7K,EAAMiJ,EAAaC,EAAgB/J,EAAWkK,EAAmBC,EAAiBS,IAE5D,IAAtB/J,EAAK1B,MAAMpB,OACb,OACE,qBAAK4N,UAAWvB,EAAQT,YAAxB,SACE,cAACiC,EAAA,EAAD,CAAYC,MAAM,YAAYC,QAAQ,KAAtC,SACG,+BAOT,IAtDgB,EAsDVC,EAAkBrB,EAAWhB,OAAS,IACtCsC,EAAiBhC,EAAaU,EAAW/C,MAAQ,IAAM+C,EAAW/C,MAAQ,GAvDhE,cA0DF9G,EAAK1B,OA1DH,IA0DhB,2BAA0B,CAAC,IAAlB8M,EAAiB,QACxBA,EAAEhK,EAAIiK,EAAoBtC,EAAsBoC,EAAwC,IAAvBpC,GACjEqC,EAAE9J,EAAI+J,EAAoBrC,EAAqBkC,EAAwC,IAAtBlC,IA5DnD,gCAgEhB,IAAIsC,EAAU,YL1BT,SACLhN,EACAf,GAEA,IADwB,EAClB8B,EAAmB,IAAItB,IACvBhB,EAA8B,GAFZ,cAGPQ,GAHO,IAGxB,2BAAwB,CAAC,IAAhBE,EAAe,QACtB4B,EAAiBrB,IAAIP,EAAKE,QAC1B0B,EAAiBrB,IAAIP,EAAKI,SALJ,oDAOPS,GAPO,IAOxB,2BAAwB,CAAC,IAAhBK,EAAe,QACjBU,EAAiBR,IAAIF,EAAKC,KAC7B7B,EAAIM,KAAKsB,IATW,gCAYxB,OAAO5B,EKWcuD,CAA0BN,EAAK1B,MAAO0B,EAAKzC,QAChE,GAAI0L,GAAeA,EAAYjK,KAAO,EAAG,CACvC,IADuC,EACjCM,EAAO,IAAIvB,IADsB,cAEzBiC,EAAK1B,OAFoB,IAEvC,2BAA0B,CAAC,IAAlB8M,EAAiB,QACxB9L,EAAKtB,IAAIoN,EAAExM,KAH0B,gCAMvC,cAAmBT,MAAMC,KAAK6K,GAA9B,eAA4C,CAAvC,IAAI1J,EAAM,KACRD,EAAKT,IAAIU,KACZD,EAAKtB,IAAIuB,GACT+L,EAAWjO,KAAK,CAAEuB,GAAIW,EAAQgM,MAAOhM,MAM3C,IAhFgB,EAgFZ6B,EAAI+J,EAzH2B,IA0H/B7J,EAAI0H,EAjFQ,cAkFCsC,GAlFD,IAkFhB,2BAA6B,CAAC,IAArB3M,EAAoB,QAC3BA,EAAKyC,EAAIA,EACTzC,EAAK2C,EAAIA,EACTA,GA5HsC,IAuCxB,gCAgGhB,GAPAtB,EAAKb,UAAYA,EACjBa,EAAK1D,SAAWA,EAMY,kBAJP6I,EAAc+D,EAAgBlJ,EAAM5D,EAAW,CAClEgF,EAAGiI,EACH/H,EAAGgI,IAGH,OACE,qBAAKwB,UAAWvB,EAAQT,YAAxB,SACE,cAACiC,EAAA,EAAD,CAAYC,MAAM,QAAQC,QAAQ,SAwCxC,IAlCA,IAgCIO,EAhCEC,GAAW,CACfC,uBAAuB,EACvBC,2BAA4BzC,IAAmB7F,EAAW0B,YAC1D+B,MAAOqE,EACPtC,OAAQqC,EACR5O,SAAUA,EACVqC,KAAM,CACJqM,MAAO,aACPhM,KAAM,IACN4M,cAAe,SACfC,cAAe,QACfC,WAAY,OACZC,SAAU,GAEZtO,KAAM,CACJuN,MAAO,OACPgB,YAAa9P,EAAcE,GAAWC,SACtCZ,KAAMyN,IAAmB7F,EAAW4B,IAAM,eAAiB,YAE7DgH,GAAI,CACFC,YAAa,IACbC,SAAU,IACVC,WAAY,IACZC,aAAc,GACdC,kBAAkB,GAEpBC,UAAW,GAIPC,GAAW,GACXC,GAAW,GAEXnN,GAAO,IAAIvB,IACjB,8BAAqBiC,EAAK1B,OAA1B,YAAoCgN,IAApC,kBAAiD,CAA5C,IAAI3M,GAAI,OACPY,GAASZ,GAAKC,GACdU,GAAKT,IAAIU,MAGbD,GAAKtB,IAAIuB,IACLZ,GAAK4M,MAAMmB,gBAAkBtD,EAAWuD,OAAOD,eACjDlB,EAAUjM,GACViN,GAASnP,KAAT,2BACKsB,IADL,IAEEC,GAAImL,EAAWxK,KAAWA,GAC1ByL,MAAO,MACP4B,UAAW,YAGbJ,GAASnP,KAAT,2BAAmBsB,IAAnB,IAAyBC,GAAImL,EAAWxK,KAAWA,OAIvD,IAAIsN,GAAa7M,EAAKzC,OACL,IAAbjB,IACFuQ,GL3CG,SAA6BtP,GAClC,IADiE,EAC7D+B,EAAO,IAAIvB,IACXhB,EAAM,GAFuD,cAGhDQ,GAHgD,IAGjE,2BAAwB,CAAC,IAAhBE,EAAe,QAClBqP,EAAMrP,EAAKE,OAAS,WAAaF,EAAKI,OACtCkP,EAAUtP,EAAKI,OAAS,WAAaJ,EAAKE,OAC1C2B,EAAKT,IAAIkO,KAGbzN,EAAKtB,IAAI8O,GACT/P,EAAIM,KAAKI,KAVsD,gCAYjE,OAAOV,EK+BQuD,CAAgCN,EAAKzC,QAhKpC,sBAmKCsP,IAnKD,IAmKhB,8BAA6B,CAAC,IAArBpP,GAAoB,SAC3BgP,GAASpP,KAAT,2BACKI,IADL,IAEEE,OAAQoM,EAAWtM,GAAKE,SAAWF,GAAKE,OACxCE,OAAQkM,EAAWtM,GAAKI,SAAWJ,GAAKI,WAvK5B,kCA6KhB,OACE,cAAC,QAAD,CACEe,GAAG,WACHoB,KAAM,CACJ1B,MAAOkO,GACPjP,MAAOkP,GACPO,cAAexB,EAAUzB,EAAWyB,QAAWyB,GAEjD9Q,OAAQsP,M,kBCpOP,SAASyB,EAAaC,EAAe1R,EAAc2R,GACxD,IAAMjR,EAASD,EAAcT,GAW7B,OAVAU,EAAOgR,MAAQA,EACXC,IACEA,EAAQ7Q,aACVJ,EAAOI,YAAa,GAElB6Q,EAAQC,eACVlR,EAAOkR,cAAe,IAIlB5R,GACN,KAAKF,EAAUG,UACf,KAAKH,EAAUI,kBACb,OA+BC,SAAoBQ,GAMzB,IAAMgR,EAAkDhR,EAAlDgR,MAAN,EAAwDhR,EAA3CE,gBAAb,WAAwDF,EAAzBkR,oBAA/B,SAIE,IADAF,EAAQA,EAAMR,QACLzP,OAAS,EAAG,MAAM,IAAIoQ,MAAM,kCACrCH,EAAQA,EAAMI,MAAM,EAAGJ,EAAMjQ,OAAS,GAEtC,IAAMK,EAAO,GACPiQ,EAAU,IAAIzP,IAEhB0P,EAAW,EACXC,EAAkBP,EAAMQ,QAAQ,IAAKF,GACzC,MAA2B,IAArBC,GAAwB,CAC5B,IAAME,EAAmBT,EAAMQ,QAAQ,IAAKD,GAC5C,IAAyB,IAAtBE,EAAyB,MAAM,IAAIN,MAAM,iBAE5C,IACE,IAAMO,EAAOC,GACXX,EAAMI,MAAMG,EAAgB,EAAGE,GAC/BJ,EACAnR,EACAgR,GAEF9P,EAAMF,KAAKwQ,GACX,MAAO/H,GACP,MAAMA,EAGR2H,EAAWG,EACXF,EAAkBP,EAAMQ,QAAQ,IAAKF,GAGvC,GAAoB,IAAjBlQ,EAAML,OAAc,MAAM,IAAIoQ,MAAM,kBAEvC,MAAO,CAACE,QAASA,EAASjQ,MAAOA,GAvExBwQ,CAAW5R,GACpB,KAAKZ,EAAUK,cACb,OAyGG,SAA4BO,GAKjC,IAAMgR,EAAsBhR,EAAtBgR,MAAO5Q,EAAeJ,EAAfI,WAIb,IADA4Q,EAAQA,EAAMR,QACLzP,OAAS,EAAG,MAAM,IAAIoQ,MAAM,mCACrCH,EAAQA,EAAMI,MAAM,EAAGJ,EAAMjQ,OAAO,GAEpC,IAAMK,EAAQ,GACRiQ,EAAU,IAAIzP,IAEhB0P,EAAW,EACXC,EAAkBP,EAAMQ,QAAQ,IAAKF,GACrCO,EAAUzR,EAAa,EAAI,EAC/B,MAA4B,IAArBmR,GAAwB,CAC7B,IAAME,EAAmBT,EAAMQ,QAAQ,IAAKD,GAC5C,IAA0B,IAAtBE,EAAyB,MAAM,IAAIN,MAAM,iBAE7C,IAAM5P,EAAMsQ,EAAQC,WACpBT,EAAQxP,IAAIN,GAEZ,IACE,IADE,EACIZ,EAAMoR,GAAWf,EAAMI,MAAMG,EAAkB,EAAGE,IADtD,cAEc9Q,GAFd,IAEF,2BAAqB,CAAC,IAAbc,EAAY,QACnB4P,EAAQxP,IAAIJ,GACVF,IAAQE,GAEVL,EAAMF,KAAK,CAAEM,OAAQD,EAAKG,OAAQD,KANlC,+BASF,MAAOuQ,GACP,MAAMA,EAGRV,EAAWG,EACXF,EAAkBP,EAAMQ,QAAQ,IAAKF,GACrCO,IAEJ,MAAO,CAAER,QAASA,EAASjQ,MAAOA,GAnJvB6Q,CAAmBjS,GAC5B,KAAKZ,EAAUM,gBACb,OAqKC,SAA8BM,GACnC,IAAMgR,EAAUhR,EAAVgR,MAEN,IADAA,EAAQA,EAAMR,QACJzP,OAAS,EAAG,MAAM,IAAIoQ,MAAM,mBACtCH,EAAQA,EAAMI,MAAM,EAAGJ,EAAMjQ,OAAS,GAGtC,IAAMmR,EAAyB,GACzB9Q,EAAQ,GACRiQ,EAAU,IAAIzP,IAEhB0P,EAAW,EACXC,EAAkBP,EAAMQ,QAAQ,IAAKF,GACrCO,EAAU,EACd,MAA4B,IAArBN,GAAwB,CAC7B,IAAME,EAAmBT,EAAMQ,QAAQ,IAAKD,GAC5C,IAA0B,IAAtBE,EAAyB,MAAM,IAAIN,MAAM,6BAE7C,IAAM5P,EAAMsQ,EAAQC,WACpBT,EAAQxP,IAAIN,GAGZ+P,EAAWG,EACXF,EAAkBP,EAAMQ,QAAQ,IAAKF,GACrCO,IAIF,IADA,IAAM5C,EAAIiD,EAAOnR,OACRC,EAAI,EAAGA,EAAIkR,EAAOnR,OAAQC,IAAK,CACtC,IAAML,EAAMuR,EAAOlR,GACnB,GAAIL,EAAII,SAAWkO,EAAG,MAAM,IAAIkC,MAAM,iDACtC,IAAK,IAAIgB,EAAI,EAAGA,EAAIlD,EAAGkD,IAAK,CAC1B,IAAMC,EAASzR,EAAIwR,GAED,IADAE,SAASD,IAEzBhR,EAAMF,KAAK,CAAEM,OAAQR,EAAE8Q,WAAYpQ,OAAQyQ,EAAEL,cAKnD,MAAO,CAAET,QAASA,EAASjQ,MAAOA,GA7MvBkR,CAAqBtS,GAC9B,KAAKZ,EAAUO,YACb,OA8MC,SAAwBK,GAC7B,IAEIuS,EAFEvB,EAAUhR,EAAVgR,MACNA,EAAQA,EAAMR,OAEd,IACE+B,EAAUC,IAAUxB,GACpB,MAAOrH,GACP,MAAM,IAAIwH,MAAMxH,EAAM8I,SAExB,IAAKF,EAAQpQ,MACX,MAAM,IAAIgP,MAAM,+CAElB,IAZwD,EAYpDhP,EAAQoQ,EAAQpQ,MAEdkP,EAAU,IAAIzP,IACdR,EAAQ,GAf0C,cAiBvCe,GAjBuC,IAiBxD,2BAAwB,CAAC,IAAhBK,EAAe,QAEtB,GADA6O,EAAQxP,IAAIW,EAAKC,IACbD,EAAKG,SAAU,CACjB,IADiB,EACbA,EAAWH,EAAKG,SADH,cAECA,GAFD,IAEjB,2BAA4B,CAAC,IAApBiD,EAAmB,QAC1BxE,EAAMF,KAAK,CAAEM,OAAQgB,EAAKC,GAAIf,OAAQkE,KAHvB,iCAnBmC,8BA2BxD,MAAO,CAAE5C,UAAWuP,EAAQvP,UAAWqO,QAASA,EAASjQ,MAAOA,GAzOrDsR,CAAe1S,GACxB,KAAKZ,EAAUQ,iBACb,OA0OC,SAA6BI,GAClC,IAEIuS,EAFEvB,EAAUhR,EAAVgR,MACNA,EAAQA,EAAMR,OAEd,IACE+B,EAAUC,IAAUxB,GACpB,MAAOrH,GACP,MAAM,IAAIwH,MAAMxH,EAAM8I,SAGxB,IAAKF,EAAQpQ,MACX,MAAM,IAAIgP,MAAM,+CAElB,IAb6D,EAazDhP,EAAQoQ,EAAQpQ,MAEdkP,EAAU,IAAIzP,IACdR,EAAQ,GAERgD,EAAgB,GAlBuC,cAoB5CjC,GApB4C,IAoB7D,2BAAwB,CAAC,IAAhBK,EAAe,QACtB6O,EAAQxP,IAAIW,EAAKC,IACjB,IAAMqC,EAAQ,IAAI8B,EAASpE,EAAKC,IAChC2B,EAAS5B,EAAKC,IAAMqC,EAEhBtC,EAAKyD,MACP7E,EAAMF,KAAK,CAAEM,OAAQgB,EAAKC,GAAIf,OAAQc,EAAKyD,OAEzCzD,EAAK0D,OACP9E,EAAMF,KAAK,CAAEM,OAAQgB,EAAKC,GAAIf,OAAQc,EAAK0D,SA7Bc,kDAkC5C/D,GAlC4C,IAkC7D,2BAAwB,CAAC,IAAhBK,EAAe,QAChBsC,EAAQV,EAAS5B,EAAKC,IAExBD,EAAKyD,MACPnB,EAAMnC,SAASzB,KAAKkD,EAAS5B,EAAKyD,OAEhCzD,EAAK0D,QACPpB,EAAMnC,SAASzB,KAAKkD,EAAS5B,EAAK0D,QAClC9B,EAAS5B,EAAK0D,OAAOZ,cAAe,IA1CqB,8BA8C7D,MAAO,CACLtC,UAAWuP,EAAQ9N,KACnBV,KAAMK,EAASmO,EAAQ9N,MACvBT,aAAcI,EACdiN,QAASA,EACTjQ,MAAOA,GA7REuR,CAAoB3S,GAC7B,KAAKZ,EAAUS,WACb,OAiSC,SAAyBG,GAC9B,IAAMgR,EAAUhR,EAAVgR,MAEN,IADAA,EAAQA,EAAMR,QACJzP,OAAS,EACjB,MAAM,IAAIoQ,MAAM,mBAIlB,GAAqB,KADrBH,GADAA,EAAQA,EAAMI,MAAM,EAAGJ,EAAMjQ,OAAS,IACxByP,QACJzP,OACR,MAAM,IAAIoQ,MAAM,mBAElB,IAAME,EAAU,IAAIzP,IACdgR,EAAmB,GACnBxR,EAAoB,GAC1B,IAA4B,IAAxB4P,EAAMQ,QAAQ,KAEhB,OADAH,EAAQxP,IAAImP,GACL,CAAEhO,UAAWgO,EAAOK,QAASA,EAASjQ,MAAOA,GAGtD,IAAIyR,EAAK7B,EAAM8B,MAAM,KACrBD,EAAKA,EAAGE,KAAI,SAACC,EAAMC,GACjB,IAAIC,EAAUC,GAAaH,GACvBrC,EAAMsC,EAAM,SAGhB,OAFAL,EAAYjC,GAAOuC,EACnB7B,EAAQxP,IAAI8O,GACLA,KAIT,IAFA,IACIlM,EADEL,EAAgB,GAEbpD,EAAI,EAAGA,EAAI6R,EAAG9R,OAAQC,IAAK,CAClC,IAAMO,EAAMsR,EAAG7R,GAEf,GADAqQ,EAAQxP,IAAIN,IACP6C,EAASzC,eAAeJ,GAAM,CACjC,IAAMuD,EAAQ,IAAI8B,EAASrF,GAC3B6C,EAAS7C,GAAOuD,EAER,IAAN9D,IACFyD,EAAOlD,GAGT,IAAI6R,EAAmB,EAAJpS,EAAQ,EACvBqS,EAAoB,EAAJrS,EAAQ,EAC5B,GAAIoS,EAAeP,EAAG9R,OAAQ,CAC5B,IAAMuS,EAAWF,EAAe,SAE1BtO,EAAQ,IAAI8B,EAAS0M,GAC3BlP,EAASkP,GAAYxO,EACrBV,EAAS7C,GAAKoB,SAASzB,KAAK4D,GAE5B1D,EAAMF,KAAK,CAAEM,OAAQD,EAAKG,OAAQ4R,IAEpC,GAAID,EAAgBR,EAAG9R,OAAQ,CAC7B,IAAMuS,EAAWD,EAAgB,SAE3BvO,EAAQ,IAAI8B,EAAS0M,GAC3BlP,EAASkP,GAAYxO,EACrBV,EAAS7C,GAAKoB,SAASzB,KAAK4D,GAC5BA,EAAMQ,cAAe,EAErBlE,EAAMF,KAAK,CAAEM,OAAQD,EAAKG,OAAQ4R,KAGtC,MAAO,CACLtQ,UAAWyB,EACXV,KAAMK,EAASK,GACfT,aAAcI,EACdiN,QAASA,EACTuB,YAAaA,EACbxR,MAAOA,GArWEmS,CAAgBvT,GACzB,KAAKZ,EAAUU,aACb,OA0WC,SAA2BE,GAChC,IAAMgR,EAAUhR,EAAVgR,MAEN,IADAA,EAAQA,EAAMR,QACJzP,OAAS,EACjB,MAAM,IAAIoQ,MAAM,mBAIlB,GAAqB,KADrBH,GADAA,EAAQA,EAAMI,MAAM,EAAGJ,EAAMjQ,OAAS,IACxByP,QACJzP,OACR,MAAM,IAAIoQ,MAAM,mBAGlB,IAAME,EAAU,IAAIzP,IACdgR,EAAmB,GACnBxR,EAAoB,GAE1B,IAA4B,IAAxB4P,EAAMQ,QAAQ,KAEhB,OADAH,EAAQxP,IAAImP,GACL,CAAEhO,UAAWgO,EAAOK,QAASA,EAASjQ,MAAOA,GAGtD,IAAMgD,EAAgB,GAClByO,EAAK7B,EAAM8B,MAAM,KACrBD,EAAKA,EAAGE,KAAI,SAACC,EAAMC,GACjB,IAAIC,EAAUC,GAAaH,GACvBrC,EAAMsC,EAAM,SAChB,GAAgB,SAAZC,EAAoB,CACtB7B,EAAQxP,IAAI8O,GACZ,IAAM7L,EAAQ,IAAI8B,EAAS+J,GAC3BvM,EAASuM,GAAO7L,EAChB8N,EAAYjC,GAAOuC,EAErB,OAAOF,EAAKxC,UAGd,IAAI7J,EAAQ,GACZA,EAAMzF,KAAK,WACX,IAAI+R,EAAM,EACV,KAAOtM,EAAM5F,OAAS,GAAG,CACvB,IAAIQ,EAAMoF,EAAMD,QAChB,GAAIuM,GAAOJ,EAAG9R,OAAQ,MACtB,IAAIU,EAAMoR,EAAGI,GAWb,GAVY,SAARxR,IAGFA,EAAMwR,EAAM,SAEZ7O,EAAS7C,GAAeoB,SAASzB,KAAKkD,EAAS3C,IAC/CL,EAAMF,KAAK,CAAEM,OAAQD,EAAKG,OAAQD,IAClCkF,EAAMzF,KAAKO,MAEbwR,GACWJ,EAAG9R,OAAQ,MAEV,UADZU,EAAMoR,EAAGI,MAGPxR,EAAMwR,EAAM,SAEZ7O,EAAS7C,GAAeoB,SAASzB,KAAKkD,EAAS3C,IAC/C2C,EAAS3C,GAAK6D,cAAe,EAC7BlE,EAAMF,KAAK,CAAEM,OAAQD,EAAKG,OAAQD,IAClCkF,EAAMzF,KAAKO,IAEbwR,IAGF,MAAO,CACLjQ,UAAW,UACXe,KAAMK,EAAS,WACfJ,aAAcI,EACdiN,QAASA,EACTuB,YAAaA,EACbxR,MAAOA,GAlbEoS,CAAkBxT,IAO/B,SAASmT,GAAaM,GAOpB,QANAA,EAAIA,EAAEjD,QACAzP,QAAU,MAAA0S,EAAEC,OAAO,IAAc,MAAAD,EAAEC,OAAOD,EAAE1S,OAAS,IAEhD0S,EAAE1S,QAAU,MAAA0S,EAAEC,OAAO,IAAc,MAAAD,EAAEC,OAAOD,EAAE1S,OAAS,MADhE0S,EAAIA,EAAErC,MAAM,EAAGqC,EAAE1S,OAAS,IAIrB0S,EAgDP,SAAS9B,GACP8B,EACApC,EACAnR,EACAgR,GAIF,GAAgB,KAFhBuC,EAAIA,EAAEjD,QAEDzP,SAAoC,IAApB0S,EAAEjC,QAAQ,KAC7B,MAAM,IAAIL,MAAM,4CAElB,IAAM0B,EAAKY,EAAEX,MAAM,KACbvR,EAAM4R,GAAaN,EAAG,IACtBpR,EAAM0R,GAAaN,EAAG,IAE5B,GAAkB,IAAftR,EAAIR,QAA+B,IAAfU,EAAIV,OACzB,MAAM,IAAIoQ,MAAM,4CAElBE,EAAQxP,IAAIN,GACZ8P,EAAQxP,IAAIJ,GAEZ,IAAIb,EAAW,CAAEY,OAAQD,EAAKG,OAAQD,GAOtC,OANIyP,IACFtQ,EAAM,CAAEY,OAAQC,EAAKC,OAAQH,IAE5BrB,GAA0B,IAAd2S,EAAG9R,SAChBH,EAAIwO,MAAQyD,EAAG,GAAGrC,QAEb5P,EAkDT,SAASmR,GAAW0B,GAGhB,IAHkC,EAG5B7S,EAAa,GAEbiS,GAJNY,EAAIA,EAAEjD,QAIOsC,MAAM,KALe,cAMjBD,GANiB,IAMlC,2BAAqB,CAAC,IACdtP,EAAQ4P,GADK,SAEf5P,EAAMxC,OAAS,GACjBH,EAAIM,KAAKqC,IATqB,8BAalC,OAAO3C,E,oNCnLE+S,GAAmB,SAAC,GAQ1B,IAPHC,EAOE,EAPFA,YACAxE,EAME,EANFA,MACAyE,EAKE,EALFA,SAMA,OACI,sBACIC,QAAS,WACDD,GAAYA,EAASE,SACrBF,EAASE,QAAQC,SAH7B,UAOK5E,EACD,cAAC6E,GAAA,EAAD,CACIC,MAAO,CAAExH,OAAQ,OAAQR,OAAQ,oBACjCiI,MAAOP,EACPQ,UAAU,QAHd,SAKI,cAACC,GAAA,EAAD,UAOVC,GAAQ,UACRC,GAAY,UAELC,GAAcC,cAAW,SAAA1K,GAAK,MAAK,CAC5CtF,KAAM,CACFoK,MAAO9E,EAAM2K,QAAQC,gBAAgBJ,IACrCK,gBAAiBL,GACjB,UAAW,CACPK,gBATO,eAIQH,CAQvBI,MAESC,GAAiBL,cAAW,SAAA1K,GAAK,MAAK,CAC/CtF,KAAM,CACFoK,MAAO9E,EAAM2K,QAAQC,gBAAgBL,IACrCM,gBAAiBN,GACjB,UAAW,CACPM,gBAAiBN,QALCG,CAQ1BI,M,qBCzBEE,GAAqB3V,EAAUK,cAC/BuV,GAAsB9N,EAAWyB,KAwZxBsM,OA1Yf,WACE,IAAM7H,EAAUvD,IAEhB,EAAoCwD,IAAMC,UAAS,GAAnD,mBAAON,EAAP,KAAmBkI,EAAnB,KAGA,EAAoC7H,IAAMC,SAnBnB,IAmBvB,mBAAO6H,EAAP,KAAmBC,EAAnB,KACA,EAAoC/H,IAAMC,SAASyH,IAAnD,mBAAOM,EAAP,KAAmBC,EAAnB,KACA,EAAgCjI,IAAMC,UAAS,GAA/C,mBAAOnN,EAAP,KAAiBoV,EAAjB,KACA,EAAoClI,IAAMC,UAAS,GAAnD,mBAAOlN,EAAP,KAAmBoV,EAAnB,KACA,EAAwCnI,IAAMC,UAAS,GAAvD,mBAAO4D,EAAP,KAAqBuE,EAArB,KACA,EAAsCpI,IAAMC,SAxBrB,IAwBvB,mBAAOR,EAAP,KAAoB4I,EAApB,KAEA,EAAgCrI,IAAMC,SAAwB,IAA9D,mBAAOqI,EAAP,KAAiBC,EAAjB,KACA,EAAkCvI,IAAMC,SAAwB,MAAhE,mBAAOtK,EAAP,KAAkB6S,EAAlB,KAGA,EAA8CxI,IAAMC,SAAS,IAA7D,mBAAOwI,GAAP,KAAwBC,GAAxB,KACA,GAA0D1I,IAAMC,SAAS,IAAzE,qBAAO0I,GAAP,MAA8BC,GAA9B,MAGA,GAA0C5I,IAAMC,SAAS,IAAI1L,KAA7D,qBAAOsU,GAAP,MAAsBC,GAAtB,MACA,GAAwB9I,IAAMC,SAAqB,CACjDnL,MAAO,GACPf,MAAO,KAFT,qBAAOyC,GAAP,MAAauS,GAAb,MAMA,GAA4C/I,IAAMC,SAAS0H,IAA3D,qBAAOjI,GAAP,MAAuBsJ,GAAvB,MACA,GAAgDhJ,IAAMC,SAAS,IAA/D,qBAAOgJ,GAAP,MAAyBC,GAAzB,MACA,GAAoClJ,IAAMC,SAAS,IAAnD,qBAAOL,GAAP,MAAmBuJ,GAAnB,MAEMC,GAAgBpJ,IAAMqJ,SACtBC,GAAsBtJ,IAAMqJ,SAC5BE,GAAavJ,IAAMqJ,QAAO,GAEhC,GAA4CrJ,IAAMC,SAAiB,GAAnE,qBAAOuJ,GAAP,MAAuBC,GAAvB,MACA,GAAgDzJ,IAAMC,SAAiB,GAAvE,qBAAOyJ,GAAP,MAAyBC,GAAzB,MA6EA,OA1EA3J,IAAMS,WAAU,WACd,GAAKqH,EAAL,CAEA,IAAI8B,EACJ,IAME,GAAiC,KALjCA,EAAcC,EAAwB/B,EAAYE,EAAY,CAC5DjV,aACA8Q,kBAGcG,QAAQxO,KAEtB,YADAkT,GAAmB,0CAGrB,MAAOpM,GAEP,YADAoM,GAAmBpM,EAAM8I,SAI3B,IAAI0E,GAAiB,EACjBjG,IAAiB0F,GAAW7C,UAC9BoD,GAAiB,EACjBP,GAAW7C,QAAU7C,GAGvB,IAAM0B,EAAcqE,EAAYrE,YAAcqE,EAAYrE,YAAc,GAExEqE,EAAY9U,MAAQH,MAAMC,KAAKgV,EAAY5F,SAAS0B,KAAI,SAAA3P,GACtD,MAAO,CACLX,GAAIW,EACJgM,MAAOwD,EAAYjR,eAAeyB,GAAUwP,EAAYxP,GAAoBA,MAG5E6T,EAAYjU,UACd6S,EAAaoB,EAAYjU,WAEpBmU,GACHtB,EAAa,MAIjBE,GAAmB,IACnBK,GAAQa,MACP,CAAC9B,EAAYE,EAAYjV,EAAY8Q,IAGxC7D,IAAMS,WAAU,WACd,GAAKhB,EAAL,CAEA,IAAImK,EACJ,IACEA,EF4UC,SAAoBjG,GACzB,IAAMK,EAAU,IAAIzP,IAEpB,IADAoP,EAAQA,EAAMR,QACJzP,OAAS,EACjB,MAAM,IAAIoQ,MAAM,mBAIlB,GAAqB,KADrBH,GADAA,EAAQA,EAAMI,MAAM,EAAGJ,EAAMjQ,OAAS,IACxByP,QACJzP,OACR,OAAOsQ,EAET,IAA4B,IAAxBL,EAAMQ,QAAQ,KAEhB,OADAH,EAAQxP,IAAIsR,GAAanC,IAClBK,EAET,IAfwC,EAelCwB,EAAK7B,EAAM8B,MAAM,KAfiB,cAgB1BD,GAhB0B,IAgBxC,2BAAkB,CAAC,IAAVY,EAAS,SAChBA,EAAIN,GAAaM,IACX1S,QAAQsQ,EAAQxP,IAAI4R,IAlBY,8BAoBxC,OAAOpC,EEhWW6F,CAAsBpK,GACpC,MAAOkF,GAEP,YADAiE,GAAyBjE,EAAGS,SAG9BwD,GAAyB,IACzBE,GAAiBc,MAChB,CAACnK,IAEJO,IAAMS,WAAU,WACd,IADoB,EAChBsJ,EAAc,IAAIxV,IADF,cAENiC,GAAK1B,OAFC,IAEpB,2BAA0B,CAAC,IAAlB8M,EAAiB,QACxBmI,EAAYvV,IAAIoN,EAAExM,KAHA,8BAKpB,cAAmBT,MAAMC,KAAKiU,IAA9B,eAA8C,CAAzC,IAAI9S,EAAM,KACbgU,EAAYvV,IAAIuB,GAElB,IAAIiU,EAAerV,MAAMC,KAAKmV,GAC9BC,EAAavU,OAEb8S,EAAYyB,KACX,CAACnB,GAAerS,KAGjB,sBAAK8K,UAAWvB,EAAQ3I,KAAxB,UACE,cAAC6S,GAAA,EAAD,IACA,cAACC,GAAA,EAAD,CACEhL,SAAS,QACToC,UAAW6I,YAAKpK,EAAQlD,OAAT,eACZkD,EAAQ1C,YAAcsC,IAH3B,SAME,eAACyK,GAAA,EAAD,WACE,cAACC,GAAA,EAAD,CACE7I,MAAM,UACN,aAAW,cACXiF,QAAS,WACPoB,GAAc,IAEhByC,KAAK,QACLhJ,UAAW6I,YAAKpK,EAAQ5B,WAAYwB,GAAcI,EAAQ1B,MAP5D,SASE,cAACkM,GAAA,EAAD,MAEF,cAAChJ,EAAA,EAAD,CAAYE,QAAQ,KAAK+I,QAAM,EAA/B,iCAGC/V,OAAOC,KAAKmF,GACV4Q,QAAO,SAAAC,GAAC,MAAoC,kBAAzB7Q,EAAW6Q,MAC9BhF,KAAI,SAAApC,GACH,IAAIqH,EAAiB3F,SAAS1B,GAC9B,OAAOqH,IAAmBjL,GACxB,cAAC+H,GAAD,CAEEnG,UAAWvB,EAAQtB,aACnBgD,QAAQ,YACRgF,QAAS,WACPuC,GAAkB2B,IALtB,SAQGtP,EAAe2J,SAAS1B,KAPpBA,GAUP,cAAC6D,GAAD,CAEE7F,UAAWvB,EAAQtB,aACnBgD,QAAQ,YACRgF,QAAS,WACPuC,GAAkB2B,IALtB,SAQGtP,EAAe2J,SAAS1B,KAPpBA,MAWb,qBAAKhC,UAAWvB,EAAQrB,UAAxB,SACE,cAAC,KAAD,CACEhF,MAAOuP,GACP2B,SAAU,SAAAC,GAAQ,OAAI3B,GAAoB2B,IAC1CC,gBAAiB,kBAAM3B,GAAcF,KACrC8B,eAAgB,kBAAM5B,GAAc,KACpC6B,YAAa,eACbnE,MAAO,CACLvJ,MAAO,IACP+B,OAAQ,aAMlB,eAAC4L,GAAA,EAAD,CACE3J,UAAWvB,EAAQrC,OACnB+D,QAAQ,aACRyJ,OAAO,OACPC,KAAMxL,EACNI,QAAS,CACPqL,MAAOrL,EAAQnC,aANnB,UASE,sBAAK0D,UAAWvB,EAAQlC,aAAxB,UACE,cAAC0D,EAAA,EAAD,CAAYD,UAAWvB,EAAQ7B,iBAAkBuD,QAAQ,KAAK+I,QAAM,EAApE,yBAGA,cAACH,GAAA,EAAD,CACE5D,QAAS,WACPoB,GAAc,IAFlB,SAKE,cAACwD,GAAA,EAAD,SAGJ,gCACE,cAACC,GAAA,EAAD,IACA,cAACC,GAAA,EAAD,CAAajK,UAAWvB,EAAQnB,YAAhC,SACE,cAAC4M,GAAA,EAAD,CACEC,gBAAiB,CAAE5E,MAAO,CAAE6E,cAAe,SAC3C3J,MACE,cAAC,GAAD,CACEA,MAAO,cACPwE,YAAa,8CACbC,SAAU4C,KAGd5C,SAAU4C,GACV4B,YAAY,4BACZW,WAAS,EACTC,KAAM,EACNC,QAAS,GACTpK,QAAQ,WACR/H,MAAOoO,EACP8C,SAAU,SAAAkB,GACR/D,EAAc+D,EAAMzX,OAAOqF,QAE7B4C,MAAOmM,GAAgB/U,OAAS,EAChCqY,WAAYtD,OAGhB,eAAC8C,GAAA,EAAD,CAAajK,UAAWvB,EAAQnB,YAAhC,UACE,cAACoN,GAAA,EAAD,CAAY5W,GAAG,yBAAf,wBACA,cAAC6W,GAAA,EAAD,CACEC,QAAQ,yBACR9W,GAAG,mBACHsE,MAAOsO,EACP1G,UAAWvB,EAAQhB,YACnB0C,QAAQ,WACRmJ,SAAU,SAAAuB,GACRlE,EAAcjD,SAASmH,EAAE9X,OAAOqF,SAPpC,SAUGjF,OAAOC,KAAK3C,GACV0Y,QAAO,SAAAC,GAAC,MAAmC,kBAAxB3Y,EAAU2Y,MAC7BjV,MAAK,SAAC2W,EAAGC,GAAJ,OAAUra,EAASgT,SAASoH,IAAIE,cAActa,EAASgT,SAASqH,QACrE3G,KAAI,SAAApC,GAAG,OACN,cAACiJ,GAAA,EAAD,CAAoB7S,MAAO4J,EAA3B,SACGtR,EAASgT,SAAS1B,KADNA,WAMtB0E,IAAejW,EAAUK,eACxB,cAACoa,GAAA,EAAD,CACElL,UAAWvB,EAAQjB,iBACnB2N,QACE,cAACC,GAAA,EAAD,CACEC,QAAS5Z,EACT6X,SAAU,SAAAuB,GAAC,OAAIhE,GAAepV,IAC9B6Z,KAAK,kBACLpL,MAAM,YAGVO,MAAM,cAGTiG,IAAejW,EAAUG,WACxB,cAACsa,GAAA,EAAD,CACElL,UAAWvB,EAAQjB,iBACnB2N,QACE,cAACC,GAAA,EAAD,CACEC,QAAS9I,EACT+G,SAAU,SAAAuB,GAAC,OAAI/D,GAAiBvE,IAChC+I,KAAK,eACLpL,MAAM,YAGVO,MAAM,YAGV,cAACyK,GAAA,EAAD,CACElL,UAAWvB,EAAQjB,iBACnB2N,QACE,cAACC,GAAA,EAAD,CACEC,QAAS7Z,EACT8X,SAAU,SAAAuB,GAAC,OAAIjE,GAAapV,IAC5B8Z,KAAK,gBACLpL,MAAM,YAGVO,MAAM,aAER,cAACwJ,GAAA,EAAD,CAAajK,UAAWvB,EAAQnB,YAAhC,SACE,cAACiO,GAAA,EAAD,CACEjJ,QAAS0E,EACT5O,MAAO/D,GAAaA,EAAUjC,OAAS,EAAIiC,EAAY,KACvDiV,SAAU,SAACkB,EAA8BjB,GACnCA,GAAUrC,EAAaqC,IAE7BiC,YAAa,SAACC,GAAD,OACX,cAACvB,GAAA,EAAD,2BAAeuB,GAAf,IAAuBhL,MAAM,aAAalD,OAAO,SAAS4C,QAAQ,mBAIxE,cAAC8J,GAAA,EAAD,CAAajK,UAAWvB,EAAQnB,YAAhC,SACE,cAAC4M,GAAA,EAAD,CACEC,gBAAiB,CAAE5E,MAAO,CAAE6E,cAAe,SAC3C3J,MACE,cAAC,GAAD,CACEA,MAAO,mBACPwE,YACE,yFAEFC,SAAU8C,KAGd9C,SAAU8C,GACV0B,YAAY,8BACZW,WAAS,EACTC,KAAM,EACNC,QAAS,GACTpK,QAAQ,WACR/H,MAAO+F,EACPmL,SAAU,SAAAkB,GACRzD,EAAeyD,EAAMzX,OAAOqF,QAE9B4C,MAAOqM,GAAsBjV,OAAS,EACtCqY,WAAYpD,aAKpB,uBACErH,UAAW6I,YAAKpK,EAAQzB,YAAT,eACZyB,EAAQvB,aAAemB,IAF5B,UAKE,qBAAK2B,UAAWvB,EAAQlC,eACxB,cAAC,EAAD,CACEzI,GAAG,WACHxC,UAAWoV,EACXlV,SAAUA,EACV2M,YAAaoJ,GACblT,UAAWA,EACXa,KAAMA,GACNkJ,eAAgBA,GAChBC,WAAYA,EACZC,WAAYA,GACZC,kBAAmB6J,GACnB5J,gBAAiB0J,KAEnB,sBAAKlI,UAAWvB,EAAQd,QAAxB,UACGS,KAAmB7F,EAAW0B,aAAemE,KAAmB7F,EAAW6B,QAC1E,qCACE,cAAC6F,EAAA,EAAD,CAAYnM,GAAG,oBAAoB4X,cAAY,EAA/C,gCAGA,cAACC,GAAA,EAAD,CACEvT,MAAOgQ,GACPkB,SAAU,SAACkB,EAAOjB,GAChBlB,GAAoBkB,IAEtB,kBAAgB,kBAChBqC,KAAM,EACNC,OAAK,EACLla,IAAK,EACLC,IAAK,OAIVwM,KAAmB7F,EAAW0B,aAC7BmE,KAAmB7F,EAAW6B,QAC9BgE,KAAmB7F,EAAW4B,KAC5B,qCACE,cAAC8F,EAAA,EAAD,CAAYnM,GAAG,oBAAoB4X,cAAY,EAA/C,8BAGA,cAACC,GAAA,EAAD,CACEvT,MAAO8P,GACPoB,SAAU,SAACkB,EAAOjB,GAChBpB,GAAkBoB,IAEpB,kBAAgB,kBAChBqC,KAAM,EACNC,OAAK,EACLla,IAAK,EACLC,IAAK,iBClaRka,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFC,SAASC,eAAe,SAM1Bb,O","file":"static/js/main.67814d6d.chunk.js","sourcesContent":["export enum InputType {\n    EdgePairs,\n    WeightedEdgePairs,\n    AdjacencyList,\n    AdjacencyMatrix,\n    GraphObject,\n    BinaryTreeObject,\n    BinaryHeap,\n    LeetcodeTree\n  }\n  \n  export function getLabel(type: number) {\n    switch (type) {\n      case InputType.EdgePairs:\n        return \"Edge List\";\n      case InputType.WeightedEdgePairs:\n        return \"Weighted Edge List\";\n      case InputType.AdjacencyList:\n        return \"Adjacency List\";\n      case InputType.AdjacencyMatrix:\n        return \"Adjacency Matrix\";\n      case InputType.GraphObject:\n        return \"JSON (Graph)\";\n      case InputType.BinaryTreeObject:\n        return \"JSON (Binary Tree)\";\n    case InputType.BinaryHeap:\n      return \"Array (Binary Heap)\";\n    case InputType.LeetcodeTree:\n      return \"Array (Leetcode Tree)\";\n      default:\n        return \"Error Label\";\n    }\n  }\n  \n  export function getTypeConfig(type: InputType): any {\n    const config = {\n      inputType: type,\n      weighted: false,\n      directed: true,\n      oneIndexed: false\n    };\n    switch (type) {\n      case InputType.WeightedEdgePairs:\n        config.weighted = true;\n        break;\n      default:\n        break;\n    }\n    return config;\n  }\n  ","export function randomInRange(min: number, max: number) {\n    return Math.random() * (max-min)+min;\n}\n\n// generate permutation of integers from 1 to n\nexport function generatePermutations(arr: string[]) {\n    let rtn: string[][] = [];\n    permuteHelper(arr, 0, rtn);\n    return rtn;\n  }\n  function permuteHelper(arr: string[], start: number, rtn: string[][]) {\n    if (start === arr.length - 1) {\n      rtn.push([...arr]);\n      return;\n    }\n    permuteHelper(arr, start + 1, rtn);\n    for (let i = start + 1; i < arr.length; i++) {\n      let temp = arr[i];\n      arr[i] = arr[start];\n      arr[start] = temp;\n  \n      permuteHelper(arr, start + 1, rtn);\n  \n      temp = arr[i];\n      arr[i] = arr[start];\n      arr[start] = temp;\n    }\n  }","import { MyGraphNodeType, MyGraphLinkType } from \"../App\";\n\nexport type EdgeMap = {\n  [key: string]: Array<string>;\n};\n\n// convert layout into edge map\n// returns map of nodeIds to list of its outgoing nodes\nexport function convertToEdgeMap(links: Array<MyGraphLinkType>, directed: boolean): EdgeMap {\n  const edgeMap: any = {};\n  for (const link of links) {\n    const src = link.source;\n    const trg = link.target;\n    if (directed) {\n      if (!edgeMap.hasOwnProperty(src)) {\n        edgeMap[src] = [];\n      }\n      edgeMap[src].push(trg);\n    } else {\n      if (!edgeMap.hasOwnProperty(src)) {\n        edgeMap[src] = new Set();\n      }\n      edgeMap[src].add(trg);\n\n      if (!edgeMap.hasOwnProperty(trg)) {\n        edgeMap[trg] = new Set();\n      }\n      edgeMap[trg].add(src);\n    }\n\n  }\n  if (!directed) {\n    for (let src of Object.keys(edgeMap)) {\n      edgeMap[src] = Array.from(edgeMap[src]);\n    }\n  }\n  return edgeMap;\n}\n\n// derive start node from nodes and edges (assuming startNode is not defined)\n// 1. find the node that has indegree 0 and outdegree > 0\n// 2. if multiple satisfy #1, return the smallest id\n// 3. else return smallest id out of all nodes with at least 1 outdegree\nexport function deriveStartNode(nodes: any, edgeMap: EdgeMap): string {\n  const nodesWithIn = new Set<string>(); // nodes with indegree\n  const nodesWithOut = new Set<string>(); // nodes with outdegree\n  const currenNodes = new Set<string>();\n  const currenNodeList = [];\n  for (let node of nodes) {\n    currenNodes.add(node.id);\n    currenNodeList.push(node.id);\n  }\n\n  for (let src of Object.keys(edgeMap)) {\n    if (currenNodes.has(src)) {\n      nodesWithOut.add(src);\n      const children = edgeMap[src];\n      for (let trg of children) {\n        nodesWithIn.add(trg);\n      }\n    }\n  }\n\n  // find 1.\n  let candidates = new Set<string>();\n  for (let node of nodes) {\n    if (!nodesWithIn.has(node.id) && nodesWithOut.has(node.id)) {\n      candidates.add(node.id);\n    }\n  }\n\n  if (candidates.size > 0) {\n    const arr = Array.from(candidates);\n    arr.sort();\n    return arr[0];\n  }\n\n  // if 3 doesn't exist, just return smallest nodeId\n  if (nodesWithOut.size === 0) {\n    currenNodeList.sort();\n    return currenNodeList[0];\n  }\n\n  // find 3.\n  const arr = Array.from(nodesWithOut);\n  arr.sort();\n  return arr[0];\n}\n\nexport function getExtraNodes(\n  nodes: Array<MyGraphNodeType>,\n  links: Array<MyGraphLinkType>\n): Array<MyGraphNodeType> {\n  const connectedNodeIds = new Set<string>();\n  const rtn: Array<MyGraphNodeType> = [];\n  for (let link of links) {\n    connectedNodeIds.add(link.source);\n    connectedNodeIds.add(link.target);\n  }\n  for (let node of nodes) {\n    if (!connectedNodeIds.has(node.id)) {\n      rtn.push(node);\n    }\n  }\n  return rtn;\n}\n\n// get all disconeccted components\n// return list of list of nodes\n// Note: the connected component with the start node should always be first in the returned l\nexport function getDisconnectedComponents(\n  nodes: Array<MyGraphNodeType>,\n  links: Array<MyGraphLinkType>,\n  startNode: string | undefined\n) {\n  const idToNodes: { [key: string]: MyGraphNodeType } = {};\n  for (let node of nodes) {\n    idToNodes[node.id] = node;\n  }\n  const rtn: Array<Array<MyGraphNodeType>> = [];\n\n  const connectedNodeIds = new Set<string>();\n  for (let link of links) {\n    connectedNodeIds.add(link.source);\n    connectedNodeIds.add(link.target);\n  }\n\n  const edgeMap: EdgeMap = convertToEdgeMap(links, false);\n  const seen = new Set<string>();\n  for (let nodeId of Array.from(connectedNodeIds)) {\n    if (!seen.has(nodeId)) {\n      const collected = new Set<string>();\n      dfs(nodeId, edgeMap, seen, collected);\n      // collect all the nodes objects in a list\n      const toAdd: Array<MyGraphNodeType> = [];\n      for (let c of Array.from(collected)) {\n        toAdd.push(idToNodes[c]);\n      }\n\n      if (startNode && collected.has(startNode)) {\n        rtn.unshift(toAdd);\n      } else {\n        rtn.push(toAdd);\n      }\n    }\n  }\n\n  return rtn;\n}\nfunction dfs(nodeId: string, edgeMap: EdgeMap, seen: Set<string>, collected: Set<string>) {\n  if (seen.has(nodeId)) return;\n  seen.add(nodeId);\n  collected.add(nodeId);\n  const children = edgeMap[nodeId];\n  if (!children) return;\n  for (let child of children) {\n    dfs(child, edgeMap, seen, collected);\n  }\n}\n\nexport function isStartNodeInComponent(startNode: string, nodes: Array<MyGraphNodeType>) {\n  for (let node of nodes) {\n    if (node.id === startNode) return true;\n  }\n  return false;\n}\n\n// used for undirected graphs: remove links that are backlinks of another edge\nexport function removeRepeatedEdges(links: Array<MyGraphLinkType>) {\n  let seen = new Set<string>();\n  let rtn = [];\n  for (let link of links) {\n    let key = link.source + \"-linkTo-\" + link.target;\n    let backKey = link.target + \"-linkTo-\" + link.source;\n    if (seen.has(backKey)) {\n      continue;\n    }\n    seen.add(key);\n    rtn.push(link);\n  }\n  return rtn;\n}","import { MyDataType } from \"../App\";\nimport * as LayoutUtils from \"./layoutUtils\";\nimport * as Graph from \"../graph/Graph\";\nimport { InputType } from \"../parser/inputTypes\";\n\nconst DEFAULT_PADDING = 0.4;\nconst DEFAULT_SPACE_BETWEEN_COMPONENTS = 0.8;\n\nconst spacingArray = [50, 75, 90, 125, 160];\n\ntype IdToNode = {\n  [key: string]: TreeNode;\n};\n\nfunction isBinaryTree(inputType: number): boolean {\n  return (\n    inputType === InputType.BinaryTreeObject ||\n    inputType === InputType.BinaryHeap ||\n    inputType === InputType.LeetcodeTree\n  );\n}\n\nexport function layoutTree(data: MyDataType, inputType: number, spacing: { x: number; y: number }){\n  let { startNode, nodes, links, directed, tree, idToTreeNode } = data;\n  let isBinary = isBinaryTree(inputType);\n  if (!isBinary) {\n    directed = false;\n  }\n\n  const edgeMap = LayoutUtils.convertToEdgeMap(links, !!directed);\n  let idToNode: IdToNode = {};\n// run Buchheim algorithm on all disconnected components, then lay them out next to each other\n  let rightMostX = 0;\n  const disconnectedComponents = LayoutUtils.getDisconnectedComponents(nodes, links, startNode);\n\n  for (let comp of disconnectedComponents) {\n    // derive the start node based on if user specified it\n    let actualStartNode: string | null = null;\n    if (startNode && startNode.length > 0) {\n      if (LayoutUtils.isStartNodeInComponent(startNode, comp)) {\n        actualStartNode = startNode;\n      }\n    }\n    if (!actualStartNode) {\n      actualStartNode = LayoutUtils.deriveStartNode(comp, edgeMap);\n    }\n\n  // construct the treeObject\n  let root = tree;\n  if (tree) {\n    idToNode = idToTreeNode as IdToNode;\n  }\n  if (!root) {\n   root = constructTreeObject(edgeMap, actualStartNode, idToNode);\n }\n\n let shiftAmount = rightMostX > 0 ? rightMostX + DEFAULT_SPACE_BETWEEN_COMPONENTS : 0;\n rightMostX = runBuchheim(root, DEFAULT_PADDING, isBinary, 0);\n moveSubtree(root, shiftAmount);\n}\n\n  // assign positions to actual nodes\n  for (let node of nodes) {\n    // normalize node positions based on graph size and padding\n    const nodeId = node.id;\n    const tNode = idToNode[nodeId];\n    if (tNode) {\n      let realx = Graph.DEFAULT_LEFT_PADDING / 2 + spacingArray[spacing.x] * tNode.x;\n      let realy = Graph.DEFAULT_TOP_PADDING + spacingArray[spacing.y] * tNode.y;\n      node.x = realx;\n      node.y = realy;\n    }\n  }\n}\n\nfunction runBuchheim(root: TreeNode, padding: number, isBinary: boolean, depth: number) {\n  // if no children, return self at position 0\n  root.y = depth;\n  if (root.children.length === 0) {\n    // this is a leaf node\n    root.x = 0;\n    return root.x;\n  }\n  // if only one child, put it directly above its one child\n  // (unless binary tree, then we must respect left/right child placements)\n  if (root.children.length === 1) {\n    runBuchheim(root.children[0], padding, isBinary, depth + 1);\n    root.x = root.children[0].x;\n    if (isBinary) {\n      if (root.children[0].isRightChild) {\n        if (root.children[0].x < 0.5) {\n          const distanceToMove = 0.5 - root.children[0].x;\n          moveSubtree(root.children[0], distanceToMove);\n        }\n        root.x = root.children[0].x - 0.5;\n      } else {\n        // child is a left child\n        root.x = root.children[0].x + 0.5;\n      }\n    }\n    let rightContour = getContours(root)[1];\n    let rightMostX = root.x;\n    for (let r of rightContour) {\n      rightMostX = Math.max(rightMostX, r);\n    }\n    return rightMostX;\n  }\n\n  let prevRightContour: Array<number> = [];\n\n  for (let child of root.children) {\n    runBuchheim(child, padding, isBinary, depth + 1);\n    let [leftContour, rightContour] = getContours(child);\n    if (child !== root.children[0]) {\n      const minShift = getMinimumShift(prevRightContour, leftContour, padding);\n      // perform the move\n      moveSubtree(child, minShift);\n      [leftContour, rightContour] = getContours(child);\n    }\n    for (let i = 0; i < prevRightContour.length; i++) {\n      const val = prevRightContour[i];\n      if (i >= rightContour.length) {\n        rightContour.push(val);\n      } else {\n        rightContour[i] = Math.max(rightContour[i], val);\n      }\n    }\n    prevRightContour = rightContour;\n  }\n\n  // parent should be in middle of all children\n  const midpoint = (root.children[0].x + root.children[root.children.length - 1].x) / 2;\n  root.x = midpoint;\n\n  // return rightmost point of tree\n  let rightMostX = root.x;\n  for (let r of prevRightContour) {\n    rightMostX = Math.max(rightMostX, r);\n  }\n  return rightMostX;\n}\n\nfunction getContours(root: TreeNode): Array<Array<number>> {\n  // bfs to get the min and max x position of each level\n  const left: Array<number> = [];\n  const right: Array<number> = [];\n\n  let curr = [root];\n  while (curr.length > 0) {\n    let next: Array<TreeNode> = [];\n    let lo = 999999999;\n    let hi = -999999999;\n    for (let node of curr) {\n      for (let child of node.children) {\n        next.push(child);\n      }\n      lo = Math.min(lo, node.x);\n      hi = Math.max(hi, node.x);\n    }\n    left.push(lo);\n    right.push(hi);\n    curr = next;\n  }\n  return [left, right];\n}\n\nfunction getMinimumShift(rightContour: Array<number>, leftContour: Array<number>, padding: number) {\n  if (rightContour.length === 0 || leftContour.length === 0) return 0;\n  const smallerSize = Math.min(rightContour.length, leftContour.length);\n  let res = 0;\n  if (leftContour[0] - rightContour[0] < 1) {\n    res = 1 - (leftContour[0] - rightContour[0]);\n  }\n  for (let i = 1; i < smallerSize; i++) {\n    const l = rightContour[i];\n    const r = leftContour[i];\n    if (r - l < padding) {\n      res = Math.max(res, padding - (r - l));\n    }\n  }\n  return res;\n}\n\nfunction moveSubtree(root: TreeNode, shift: number) {\n  root.x += shift;\n  for (let child of root.children) {\n    moveSubtree(child, shift);\n  }\n}\n\n// recursively constrcut tree object\nfunction constructTreeObject(\n  edgeMap: LayoutUtils.EdgeMap,\n  startNode: string,\n  idToNode: IdToNode\n): TreeNode {\n  // bfs starting from start node\n  let queue: Array<TreeNode> = [];\n  let root = new TreeNode(startNode);\n  queue.push(root);\n  let seen = new Set<string>();\n  seen.add(startNode);\n  idToNode[startNode] = root;\n\n  while (queue.length > 0) {\n    let front: TreeNode = queue.shift() as TreeNode;\n    let frontVal = front.value;\n\n    // create child nodes, add to children, and then add to back of queue\n    if (!edgeMap.hasOwnProperty(frontVal) || edgeMap[frontVal].length === 0) {\n      // this is a leaf node\n      continue;\n    }\n    let children = edgeMap[frontVal];\n    for (let child of children) {\n      if (seen.has(child)) continue;\n      seen.add(child);\n      let tempNode = new TreeNode(child);\n      front.children.push(tempNode);\n      tempNode.parent = front;\n      queue.push(tempNode);\n\n      idToNode[child] = tempNode;\n    }\n  }\n  return root;\n}\n\nexport interface TreeNode {\n  value: string;\n  children: Array<TreeNode>;\n  parent: TreeNode | null;\n\n  x: number;\n  y: number;\n  isRightChild: boolean;\n}\n\n\nexport class TreeNode {\n  constructor(value: string, isRightChild = false) {\n    this.value = value;\n    this.children = [];\n    this.parent = null;\n    this.x = 0;\n    this.y = 0;\n    this.isRightChild = isRightChild;\n  }\n}  ","import { InputType } from \"../parser/inputTypes\";\nimport { layoutTree } from \"./treeLayout\";\nimport { layoutArc } from \"./arcLayout\";\nimport { MyDataType } from \"../App\";\n\nexport enum LayoutType {\n  Tree,\n  ForceLayout,\n  TopologicalSort,\n  Arc,\n  Random\n}\n\nexport function getLayoutLabel(type: number) {\n  switch (type) {\n    case LayoutType.Tree:\n      return \"Tree\";\n    case LayoutType.ForceLayout:\n      return \"Force-Directed\";\n    case LayoutType.TopologicalSort:\n      return \"Topological Sort\";\n    case LayoutType.Arc:\n      return \"Arc\";\n    case LayoutType.Random:\n      return \"Random\";\n    default:\n      return \"Error Label\";\n  }\n}\n\nexport function getDefaultLayout({ inputType, data, directed, customNodes, startNode }: any) {\n  switch (inputType) {\n    case InputType.EdgePairs:\n    case InputType.WeightedEdgePairs:\n    case InputType.AdjacencyList:\n    case InputType.AdjacencyMatrix:\n      return LayoutType.Arc;\n    case InputType.GraphObject:\n      return LayoutType.ForceLayout;\n    case InputType.BinaryTreeObject:\n    case InputType.BinaryHeap:\n    case InputType.LeetcodeTree:\n      return LayoutType.Tree;\n    default:\n      return LayoutType.TopologicalSort;\n  }\n}\n\nexport function performLayout(\n  layoutType: number,\n  data: MyDataType,\n  inputType: number,\n  spacing: { x: number; y: number }\n) {\n  switch (layoutType) {\n    case LayoutType.Tree:\n      return layoutTree(data, inputType, spacing);\n    case LayoutType.Arc:\n      return layoutArc(data, spacing);\n    case LayoutType.ForceLayout:\n      // Handled within Graph.tsx\n      return;\n    case LayoutType.Random:\n      // Handled within Graph.tsx\n      return;\n    default:\n      console.error(\"unhandled layout type\");\n      return;\n  }\n}","import * as LayoutUtils from \"./layoutUtils\";\nimport { MyDataType, MyGraphNodeType } from \"../App\";\nimport * as Graph from \"../graph/Graph\";\nimport { generatePermutations } from \"../utils/utils\";\n\n\nconst DEFAULT_Y_PADDING = 120;\n\nconst spacingArray = [50, 60, 75, 95, 125];\n\nconst DEFAULT_MAX_LEN_TO_BRUTE_FORCE = 5;\n\nexport function layoutArc(data: MyDataType, spacing: { x: number; y: number }) {\n  let { startNode, nodes, links } = data;\n\n  const disconnectedComponents = LayoutUtils.getDisconnectedComponents(nodes, links, startNode);\n  const directedEdgeMap = LayoutUtils.convertToEdgeMap(links, true);\n  const undirectedEdgeMap = LayoutUtils.convertToEdgeMap(links, false);\n\n  let y_value = Graph.DEFAULT_TOP_PADDING + DEFAULT_Y_PADDING / 2;\n\n  for (let comp of disconnectedComponents) {\n    let actualStartNode: string | undefined;\n    if (startNode && startNode.length > 0) {\n      if (LayoutUtils.isStartNodeInComponent(startNode, comp)) {\n        actualStartNode = startNode;\n      }\n    }\n    if (!actualStartNode) {\n      actualStartNode = arrangeNodesInLine(comp, actualStartNode)[0].id;\n    }\n\n    let sortedNodeIds = arrangeSubGraph(\n      undirectedEdgeMap,\n      \"DUMMYNODE_DO_NOT_COPY\",\n      actualStartNode,\n      directedEdgeMap\n    );\n    let idToNode: any = {};\n    for (let node of nodes) {\n      idToNode[node.id] = node;\n    }\n    let sortedNodes = [];\n    for (let nid of sortedNodeIds) {\n      sortedNodes.push(idToNode[nid]);\n    }\n\n    // assign positions to the sorted notes\n    let x_offset = Graph.DEFAULT_LEFT_PADDING / 2;\n    for (let node of sortedNodes) {\n      node.x = x_offset;\n      node.y = y_value;\n      x_offset += spacingArray[spacing.x];\n    }\n    y_value += DEFAULT_Y_PADDING * 2;\n  }\n}\n\n// return node list sorted by node ids lexicographical order\n// with startNode (if specified) in front\nfunction arrangeNodesInLine(\n  nodes: Array<MyGraphNodeType>,\n  startNode: string | undefined\n): Array<MyGraphNodeType> {\n  const collected: Array<string> = [];\n  const res: Array<string> = [];\n  const idToNode: any = {};\n  for (let node of nodes) {\n    idToNode[node.id] = node;\n    if (startNode && startNode === node.id) {\n      res.push(startNode);\n    } else {\n      collected.push(node.id);\n    }\n  }\n  collected.sort();\n  for (let nodeId of collected) {\n    res.push(nodeId);\n  }\n  const nodeRtn = [];\n  for (let nodeId of res) {\n    nodeRtn.push(idToNode[nodeId]);\n  }\n  return nodeRtn;\n}\n\n// if not cycle back, layout this node and recurse deeper\n// return an array of nodes in the order we want to place them\nfunction arrangeSubGraph(\n  edgeMap: LayoutUtils.EdgeMap,\n  backNodeId: string,\n  currNodeId: string,\n  directedEdgeMap: LayoutUtils.EdgeMap\n) {\n  if (!edgeMap[currNodeId] || edgeMap[currNodeId].length === 0) {\n    return [currNodeId];\n  }\n\n  let res = [currNodeId];\n  // loop through children\n  let children = edgeMap[currNodeId];\n  let seen = new Set<string>(); // global seen\n  for (let child of children) {\n    // skip back node\n    if (child === backNodeId || seen.has(child)) {\n      continue;\n    }\n\n    // dfs on this subgraph; it not cycleBack, recurse on this child append result to result list\n    // if cycleBack, brute force min line crossing if less than 5 nodes, else call arrangeNodesInLine()\n    let collected = new Set<string>(); // result of dfs\n    let cycleBack = [false];\n    dfs(edgeMap, seen, collected, cycleBack, currNodeId, currNodeId, child);\n\n    if (!cycleBack[0]) {\n      let recurseArr = arrangeSubGraph(edgeMap, currNodeId, child, directedEdgeMap);\n      for (let nodeId of recurseArr) {\n        res.push(nodeId);\n      }\n    } else {\n      let helperArr = bruteForceMinLineCrossings(\n        directedEdgeMap,\n        Array.from(collected),\n        currNodeId\n      );\n\n      for (let nodeId of helperArr) {\n        if (nodeId !== currNodeId) res.push(nodeId);\n      }\n    }\n  }\n  return res;\n}\n\n// determine if this dfs cycles back the prev node;\n// return set of nodes in this dfs\nfunction dfs(\n  edgeMap: LayoutUtils.EdgeMap,\n  seen: Set<string>,\n  collected: Set<string>,\n  cycleBack: Array<boolean>,\n  origin: string,\n  backNode: string,\n  currNode: string\n) {\n  //add to seen and collected\n  seen.add(currNode);\n  collected.add(currNode);\n  if (!edgeMap[currNode] || edgeMap[currNode].length === 0) {\n    return;\n  }\n\n  // loop over children, traverse unseen nodes\n  // update cycle back if seen is origin, unless the origin is the backNode\n  let children = edgeMap[currNode];\n  for (let child of children) {\n    if (child === backNode) continue;\n    if (child === origin) {\n      cycleBack[0] = true;\n      continue;\n    }\n    if (seen.has(child)) continue;\n    dfs(edgeMap, seen, collected, cycleBack, origin, currNode, child);\n  }\n}\n\nfunction bruteForceMinLineCrossings(\n  directedEdgeMap: LayoutUtils.EdgeMap,\n  collected: Array<string>,\n  origin: string\n) {\n  if (collected.length > 1 + DEFAULT_MAX_LEN_TO_BRUTE_FORCE) {\n    collected.sort();\n    return collected;\n  }\n\n  // generate permutations\n  let perms = generatePermutations(collected);\n  let res = perms[0];\n  let minCrossings = 999999;\n  for (let perm of perms) {\n    let numCrossings = calculateNumCrossings(directedEdgeMap, perm, origin);\n    if (numCrossings < minCrossings) {\n      minCrossings = numCrossings;\n      res = perm;\n    }\n    if (minCrossings === 0) break;\n  }\n  return res;\n}\nfunction calculateNumCrossings(\n  directedEdgeMap: LayoutUtils.EdgeMap,\n  perm: Array<string>,\n  origin: string\n): number {\n  let idToIndex: any = {};\n  idToIndex[origin] = -1;\n  let forward_cnt = []; // number of endpoints at each index\n  let back_cnt = [];\n  for (let i = 0; i < perm.length; i++) {\n    forward_cnt.push(0);\n    back_cnt.push(0);\n    idToIndex[perm[i]] = i;\n  }\n\n  let res = 0;\n  // start with origin\n  let children = directedEdgeMap[origin] ? directedEdgeMap[origin] : [];\n  for (let child of children) {\n    forward_cnt[idToIndex[child]] += 1;\n  }\n  // iterate through perm\n  for (let i = 0; i < perm.length; i++) {\n    children = directedEdgeMap[perm[i]];\n    if (!children) continue;\n    for (let child of children) {\n      const childInd = idToIndex[child];\n\n      if (childInd > i) {\n        // if there are any that end between i and childInd, increment crossings\n        for (let x = i + 1; x < childInd; x++) {\n          if (forward_cnt[x]) res += forward_cnt[x];\n        }\n      } else {\n        // child is behind;\n        for (let x = i - 1; x > childInd; x--) {\n          if (back_cnt[x]) res += back_cnt[x];\n        }\n      }\n    }\n\n    // update forward and back count\n    for (let child of children) {\n      const childInd = idToIndex[child];\n      if (childInd > i) {\n        forward_cnt[childInd] += 1;\n      } else {\n        // child is behind\n        back_cnt[i] += 1;\n      }\n    }\n  }\n  return res;\n}","import { makeStyles } from \"@material-ui/core/styles\";\n\nconst drawerWidth = 300;\n\nexport const useStyles = makeStyles(theme => ({\n  // layout styles\n  root: {\n    display: \"flex\",\n    overflow: \"hidden\"\n  },\n  appBar: {\n    transition: theme.transitions.create([\"margin\", \"width\"], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen\n    })\n  },\n  appBarShift: {\n    width: `calc(100% - ${drawerWidth}px)`,\n    marginLeft: drawerWidth,\n    transition: theme.transitions.create([\"margin\", \"width\"], {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen\n    })\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0\n  },\n  drawerPaper: {\n    width: drawerWidth\n  },\n  drawerHeader: {\n    display: \"flex\",\n    alignItems: \"center\",\n    padding: theme.spacing(0, 1),\n    // necessary for content to be below app bar\n    ...theme.mixins.toolbar,\n    justifyContent: \"flex-end\"\n  },\n  drawerHeaderText: {\n    width: \"100%\"\n  },\n  menuButton: {\n    marginRight: theme.spacing(2)\n  },\n  hide: {\n    display: \"none\"\n  }, \n  mainContent: {\n    flexGrow: 1,\n    padding: theme.spacing(3),\n    transition: theme.transitions.create(\"margin\", {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen\n    }),\n    marginLeft: -drawerWidth\n  },\n  contentShift: {\n    transition: theme.transitions.create(\"margin\", {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen\n    }),\n    marginLeft: 0\n  },\n  layoutButton: {\n    marginLeft: 10,\n    marginRight: 0\n  },\n  searchBar: {\n    display: \"flex\",\n    flex: 1,\n    justifyContent: \"flex-end\"\n  },\n  \n  // form styles\n  formControl: {\n    margin: theme.spacing(1),\n    width: `calc(100% - ${30}px)`\n  },\n  formControlLabel: {\n    marginLeft: -4\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2)\n  },\n\n  sliders: {\n    position: \"absolute\",\n    zIndex: 999,\n    top: 75,\n    right: 30,\n    height: 150\n  },\n  layoutError: {\n    marginRight: 150\n  }\n}));","import React from \"react\";\nimport { Graph as D3Graph } from \"react-d3-graph\";\nimport { getTypeConfig } from \"../parser/inputTypes\";\nimport * as Utils from \"../utils/utils\";\nimport * as LayoutUtils from \"../layout/layoutUtils\";\nimport { performLayout, LayoutType } from \"../layout/layoutTypes\";\nimport { Typography } from \"@material-ui/core\";\nimport { useStyles } from \"../styles/useStyles\";\n\nexport const DEFAULT_LEFT_PADDING = 100;\nexport const DEFAULT_RIGHT_PADDING = 180;\nexport const DEFAULT_TOP_PADDING = 50;\nexport const DEFAULT_EXTRA_NODE_SPACING = 50;\n\nexport type GraphProps = {\n  inputType: number;\n  data: any;\n  id: string;\n  directed: boolean;\n  customNodes: Set<string>;\n  startNode: string | null;\n  selectedLayout: number;\n  drawerOpen: boolean;\n  searchText: string;\n  horizontalSpacing: number;\n  verticalSpacing: number;\n};\n\nfunction debounce(fn: any, ms: number) {\n  let timer: any;\n  return (_: any) => {\n    clearTimeout(timer);\n    timer = setTimeout(_ => {\n      timer = null;\n      fn();\n    }, ms);\n  };\n}\n\nconst Graph = ({\n  inputType,\n  data,\n  id = \"graph-id\",\n  directed,\n  customNodes,\n  startNode,\n  selectedLayout,\n  drawerOpen,\n  searchText,\n  horizontalSpacing,\n  verticalSpacing\n}: GraphProps) => {\n  const classes = useStyles();\n\n\n  const [dimensions, setDimensions] = React.useState({\n    height: window.innerHeight,\n    width: window.innerWidth\n  });\n\n  const [oldToNewId, setOldToNewId] = React.useState<{ [key: string]: string }>({});\n\n  React.useEffect(() => {\n    const debouncedHandleResize = debounce(function handleResize() {\n      setDimensions({\n        height: window.innerHeight,\n        width: window.innerWidth\n      });\n    }, 100);\n    window.addEventListener(\"resize\", debouncedHandleResize);\n  });\n\n  // every time node set changes, we need to check to see if there are any conflicts in node ids\n  React.useEffect(() => {\n    const allIds = new Set<string>(Object.values(oldToNewId));\n    const currIdMap: { [key: string]: string } = {};\n    for (let node of data.nodes) {\n      let nodeId = node.id;\n      if (allIds.has(nodeId)) {\n        currIdMap[nodeId] = nodeId + \"-1\"; // add a 1 if there is a conflict\n      } else {\n        currIdMap[nodeId] = nodeId;\n      }\n    }\n    for (let nodeId of Array.from(customNodes)) {\n      if (allIds.has(nodeId)) {\n        currIdMap[nodeId] = nodeId + \"-1\";\n      } else {\n        currIdMap[nodeId] = nodeId;\n      }\n    }\n    setOldToNewId(currIdMap);\n  }, [data, customNodes, selectedLayout, startNode, horizontalSpacing, verticalSpacing, oldToNewId]);\n\n  if (data.nodes.length === 0) {\n    return (\n      <div className={classes.layoutError}>\n        <Typography color=\"secondary\" variant=\"h6\">\n          {\"<-- Enter a graph input.\"}\n        </Typography>\n      </div>\n    );\n  }\n\n\n  const graphPaneHeight = dimensions.height - 120;\n  const graphPaneWidth = drawerOpen ? dimensions.width - 350 : dimensions.width - 50;\n\n  // generate random positions by default (for testing purposes only)\n  for (let n of data.nodes) {\n    n.x = Utils.randomInRange(DEFAULT_LEFT_PADDING, graphPaneWidth - DEFAULT_LEFT_PADDING * 1.6);\n    n.y = Utils.randomInRange(DEFAULT_TOP_PADDING, graphPaneHeight - DEFAULT_TOP_PADDING * 1.8);\n  }\n\n  // add nodes from customNodes that don't already exist\n  let extraNodes = [...LayoutUtils.getExtraNodes(data.nodes, data.links)];\n  if (customNodes && customNodes.size > 0) {\n    const seen = new Set();\n    for (let n of data.nodes) {\n      seen.add(n.id);\n    }\n    // add if not in seen\n    for (let nodeId of Array.from(customNodes)) {\n      if (!seen.has(nodeId)) {\n        seen.add(nodeId);\n        extraNodes.push({ id: nodeId, label: nodeId });\n      }\n    }\n  }\n\n  // calculate positions for extra nodes\n  let x = graphPaneWidth - DEFAULT_RIGHT_PADDING;\n  let y = DEFAULT_TOP_PADDING;\n  for (let node of extraNodes) {\n    node.x = x;\n    node.y = y;\n    y += DEFAULT_EXTRA_NODE_SPACING;\n  }\n\n  // run layout on all connectd components\n  data.startNode = startNode;\n  data.directed = directed;\n\n  const layoutResult = performLayout(selectedLayout, data, inputType, {\n    x: horizontalSpacing,\n    y: verticalSpacing\n  });\n  if (typeof layoutResult === \"string\") {\n    return (\n      <div className={classes.layoutError}>\n        <Typography color=\"error\" variant=\"h6\">\n        </Typography>\n      </div>\n    );\n  }\n\n  const myConfig = {\n    nodeHighlightBehavior: true,\n    staticGraphWithDragAndDrop: selectedLayout !== LayoutType.ForceLayout,\n    width: graphPaneWidth,\n    height: graphPaneHeight,\n    directed: directed,\n    node: {\n      color: \"lightgreen\",\n      size: 420,\n      labelPosition: \"center\",\n      labelProperty: \"label\" as any,\n      fontWeight: \"bold\",\n      fontSize: 9\n    },\n    link: {\n      color: \"blue\",\n      renderLabel: getTypeConfig(inputType).weighted,\n      type: selectedLayout === LayoutType.Arc ? \"CURVE_SMOOTH\" : \"STRAIGHT\"\n    },\n    d3: {\n      alphaTarget: 0.05,\n      gravity: -180,\n      linkLength: 120,\n      linkStrength: 0.5,\n      disableLinkForce: false\n    },\n    focusZoom: 1\n  };\n\n\n  const argNodes = [];\n  const argLinks = [];\n  let focusId: string | undefined;\n  const seen = new Set<string>();\n  for (let node of [...data.nodes, ...extraNodes]) {\n    let nodeId = node.id;\n    if (seen.has(nodeId)) {\n      continue;\n    }\n    seen.add(nodeId);\n    if (node.label.toLowerCase() === searchText.trim().toLowerCase()) {\n      focusId = nodeId;\n      argNodes.push({\n        ...node,\n        id: oldToNewId[nodeId] || nodeId,\n        color: \"red\",\n        fontColor: \"white\"\n      });\n    } else {\n      argNodes.push({ ...node, id: oldToNewId[nodeId] || nodeId });\n    }\n  }\n\n  let linksToAdd = data.links;\n  if (directed === false) {\n    linksToAdd = LayoutUtils.removeRepeatedEdges(data.links);\n  }\n\n  for (let link of linksToAdd) {\n    argLinks.push({\n      ...link,\n      source: oldToNewId[link.source] || link.source,\n      target: oldToNewId[link.target] || link.target\n    });\n  }\n\n\n\n  return (\n    <D3Graph\n      id=\"graph-id\" // id is mandatory, if no id is defined rd3g will throw an error\n      data={{\n        nodes: argNodes,\n        links: argLinks,\n        focusedNodeId: focusId ? oldToNewId[focusId] : undefined\n      }}\n      config={myConfig}\n    />\n  );\n};\n\nexport default Graph;","import { InputType, getTypeConfig } from \"./inputTypes\";\nimport parseJson from \"parse-json\";\nimport { TreeNode } from \"../layout/treeLayout\";\n\nexport function processInput(input: string, type: number, options?: any): any {\n  const config = getTypeConfig(type);\n  config.input = input;\n  if (options) {\n    if (options.oneIndexed) {\n      config.oneIndexed = true;\n    }\n    if (options.reverseEdges) {\n      config.reverseEdges = true;\n    }\n  }\n\n  switch (type) {\n    case InputType.EdgePairs:\n    case InputType.WeightedEdgePairs:\n      return parsePairs(config);\n    case InputType.AdjacencyList:\n      return parseAdjacencyList(config);\n    case InputType.AdjacencyMatrix:\n      return parseAdjacencyMatrix(config);\n    case InputType.GraphObject:\n      return parseGraphJSON(config);\n    case InputType.BinaryTreeObject:\n      return parseBinaryTreeJSON(config);\n    case InputType.BinaryHeap:\n      return parseBinaryHeap(config);\n    case InputType.LeetcodeTree:\n      return parseLeetcodeTree(config);\n    default:\n      break;\n  }\n}\n\n// trim whitespace and remove quotes\nfunction cleanseInput(s: string) {\n  s = s.trim();\n  if (s.length && s.charAt(0) === `\"` && s.charAt(s.length - 1) === `\"`) {\n    s = s.slice(1, s.length - 1);\n  } else if (s.length && s.charAt(0) === `'` && s.charAt(s.length - 1) === `'`) {\n    s = s.slice(1, s.length - 1);\n  }\n  return s;\n}\n\n// directed pairs\n// [[2,1],[3,1],[1,4]]\nexport function parsePairs(config: {\n  input: string;\n  directed?: boolean;\n  weighted?: boolean;\n  reverseEdges?: boolean;\n}): any {\n  let { input, weighted = false, reverseEdges = false } = config;\n    // trim whitespace\n    // TODO: Error handling\n    input = input.trim();\n    if(input.length < 2) throw new Error(\"Please enter a non-empty input\");\n    input = input.slice(1, input.length - 1);\n\n    const links= [];\n    const nodeSet = new Set<string>();\n\n    let startInd = 0;\n    let nextOpenBracket = input.indexOf(\"[\", startInd);\n    while(nextOpenBracket !== -1) {\n      const nextCloseBracket = input.indexOf(\"]\", nextOpenBracket);\n      if(nextCloseBracket === -1) throw new Error(\"Missing a ']'\");\n\n      try {\n        const pair = getDirectedPair(\n          input.slice(nextOpenBracket+1, nextCloseBracket),\n          nodeSet,\n          weighted,\n          reverseEdges\n        );\n        links.push(pair);\n      } catch (error) {\n        throw error;\n      }\n\n      startInd = nextCloseBracket;\n      nextOpenBracket = input.indexOf(\"[\", startInd);\n    }\n\n    if(links.length === 0) throw new Error(\"No pairs found\");\n\n    return {nodeSet: nodeSet, links: links};\n  }\n\n  function getDirectedPair(\n    s: string,\n    nodeSet: Set<string>,\n    weighted: boolean,\n    reverseEdges: boolean\n  ) {\n  s = s.trim();\n\n  if(s.length === 0 || s.indexOf(\",\") === -1) \n    throw new Error(\"An edge pair has less than two arguments\");\n\n  const sp = s.split(\",\");\n  const src = cleanseInput(sp[0]);\n  const trg = cleanseInput(sp[1]);\n\n  if(src.length === 0 || trg.length === 0) \n    throw new Error(\"An edge pair has less than two arguments\");\n\n  nodeSet.add(src);\n  nodeSet.add(trg);\n\n  let rtn: any = { source: src, target: trg };\n  if (reverseEdges) {\n    rtn = { source: trg, target: src };\n  }\n  if(weighted && sp.length === 3) {\n    rtn.label = sp[2].trim();\n  }\n  return rtn;\n}\n  \n  // adjacency list\n  // array where arr[i] is an array of adjacent nodes\n  export function parseAdjacencyList(config: {\n    input: string;\n    directed?: boolean;\n    oneIndexed?: boolean;\n  }): any {\n    let { input, oneIndexed } = config;\n  \n    // trim whitespace\n    input = input.trim();\n    if(input.length < 2) throw new Error(\"Please enter a non-empty input.\");\n    input = input.slice(1, input.length-1);\n    \n    const links = [];\n    const nodeSet = new Set<string>();\n\n    let startInd = 0;\n    let nextOpenBracket = input.indexOf(\"[\", startInd);\n    let srcNode = oneIndexed ? 1 : 0; //index of source node\n    while (nextOpenBracket !== -1) {\n      const nextCloseBracket = input.indexOf(\"]\", nextOpenBracket);\n      if (nextCloseBracket === -1) throw new Error(\"Missing a ']'\");\n  \n      const src = srcNode.toString();\n      nodeSet.add(src);\n  \n      try {\n        const arr = parseArray(input.slice(nextOpenBracket + 1, nextCloseBracket));\n        for (let trg of arr) {\n          nodeSet.add(trg); // add target to nodeSet too\n        if (src !== trg) {\n          //TODO: should we handle self-links?\n          links.push({ source: src, target: trg });\n        }\n        }\n      } catch (ex) {\n        throw ex;\n      }\n  \n      startInd = nextCloseBracket;\n      nextOpenBracket = input.indexOf(\"[\", startInd);\n      srcNode++;\n  }\n  return { nodeSet: nodeSet, links: links };\n}\n\nfunction parseArray(s: string): any[] {\n    s = s.trim();\n  \n    const rtn: any[] = [];\n  \n    const sp = s.split(\",\");\n    for (let elem of sp) {\n      const toAdd = cleanseInput(elem);\n      if (toAdd.length > 0) {\n        rtn.push(toAdd);\n      }\n    }\n  \n    return rtn;\n}\n// adjacency matrix\n// n x n binary matrix where arr[i][j] means there is a connection between i and j\nexport function parseAdjacencyMatrix(config: { input: string }): any {\n  let { input } = config;\n  input = input.trim();\n  if (input.length < 2) throw new Error(\"Input too short\");\n  input = input.slice(1, input.length - 1);\n\n  // TODO: parse each row of the matrix and add a connection between row i and column j when 1 is encountered\n  const matrix: string | any[] = [];\n  const links = [];\n  const nodeSet = new Set<string>();\n\n  let startInd = 0;\n  let nextOpenBracket = input.indexOf(\"[\", startInd);\n  let srcNode = 0; // index of source node\n  while (nextOpenBracket !== -1) {\n    const nextCloseBracket = input.indexOf(\"]\", nextOpenBracket);\n    if (nextCloseBracket === -1) throw new Error(\"No matching close bracket\");\n\n    const src = srcNode.toString();\n    nodeSet.add(src);\n\n\n    startInd = nextCloseBracket;\n    nextOpenBracket = input.indexOf(\"[\", startInd);\n    srcNode++;\n  }\n\n  const n = matrix.length;\n  for (let i = 0; i < matrix.length; i++) {\n    const arr = matrix[i];\n    if (arr.length !== n) throw new Error(\"Adjacency matrix has incorrect column size(s)\");\n    for (let j = 0; j < n; j++) {\n      const colVal = arr[j];\n      const colValNum = parseInt(colVal);\n      if (colValNum === 1) {\n        links.push({ source: i.toString(), target: j.toString() });\n      }\n    }\n  }\n\n  return { nodeSet: nodeSet, links: links };\n}\n\nexport function parseGraphJSON(config: { input: string }) {\n  let { input } = config;\n  input = input.trim();\n  let jsonObj: any;\n  try {\n    jsonObj = parseJson(input); // parseJson library will automatically handle and throw error in syntax\n  } catch (error) {\n    throw new Error(error.message);\n  }\n  if (!jsonObj.nodes) {\n    throw new Error(\"JSON object is missing the `nodes` property\");\n  }\n  let nodes = jsonObj.nodes;\n\n  const nodeSet = new Set<string>();\n  const links = [];\n\n  for (let node of nodes) {\n    nodeSet.add(node.id);\n    if (node.children) {\n      let children = node.children;\n      for (let child of children) {\n        links.push({ source: node.id, target: child });\n      }\n    }\n  }\n\n  return { startNode: jsonObj.startNode, nodeSet: nodeSet, links: links };\n}\n\nexport function parseBinaryTreeJSON(config: { input: string }) {\n  let { input } = config;\n  input = input.trim();\n  let jsonObj: any;\n  try {\n    jsonObj = parseJson(input); // parseJson library will automatically handle and throw error in syntax\n  } catch (error) {\n    throw new Error(error.message);\n  }\n\n  if (!jsonObj.nodes) {\n    throw new Error(\"JSON object is missing the `nodes` property\");\n  }\n  let nodes = jsonObj.nodes;\n\n  const nodeSet = new Set<string>();\n  const links = [];\n\n  const idToNode: any = {};\n\n  for (let node of nodes) {\n    nodeSet.add(node.id);\n    const tNode = new TreeNode(node.id);\n    idToNode[node.id] = tNode;\n\n    if (node.left) {\n      links.push({ source: node.id, target: node.left });\n    }\n    if (node.right) {\n      links.push({ source: node.id, target: node.right });\n    }\n  }\n\n  // second traverse: construct links and mark isRightChild\n  for (let node of nodes) {\n    const tNode = idToNode[node.id];\n\n    if (node.left) {\n      tNode.children.push(idToNode[node.left]);\n    }\n    if (node.right) {\n      tNode.children.push(idToNode[node.right]);\n      idToNode[node.right].isRightChild = true;\n    }\n  }\n\n  return {\n    startNode: jsonObj.root,\n    tree: idToNode[jsonObj.root],\n    idToTreeNode: idToNode,\n    nodeSet: nodeSet,\n    links: links\n  };\n}\n\n// Binary tree/heap in array form (child is at 2n+1 and 2n+2)\n// differentiate between id and label\nexport function parseBinaryHeap(config: { input: string }) {\n  let { input } = config;\n  input = input.trim();\n  if (input.length < 2) {\n    throw new Error(\"Input too short\");\n  }\n  input = input.slice(1, input.length - 1);\n  input = input.trim();\n  if (input.length === 0) {\n    throw new Error(\"Input too short\");\n  }\n  const nodeSet = new Set<string>();\n  const nodeToLabel: any = {};\n  const links: Array<any> = [];\n  if (input.indexOf(\",\") === -1) {\n    nodeSet.add(input);\n    return { startNode: input, nodeSet: nodeSet, links: links };\n  }\n\n  let sp = input.split(\",\");\n  sp = sp.map((elem, ind) => {\n    let trimmed = cleanseInput(elem);\n    let key = ind + \" index\";\n    nodeToLabel[key] = trimmed;\n    nodeSet.add(key);\n    return key;\n  });\n  const idToNode: any = {};\n  let root: string | undefined;\n  for (let i = 0; i < sp.length; i++) {\n    const src = sp[i];\n    nodeSet.add(src);\n    if (!idToNode.hasOwnProperty(src)) {\n      const tNode = new TreeNode(src);\n      idToNode[src] = tNode;\n    }\n    if (i === 0) {\n      root = src;\n    }\n\n    let leftChildInd = i * 2 + 1;\n    let rightChildInd = i * 2 + 2;\n    if (leftChildInd < sp.length) {\n      const targetId = leftChildInd + \" index\";\n      // link child node\n      const tNode = new TreeNode(targetId);\n      idToNode[targetId] = tNode;\n      idToNode[src].children.push(tNode);\n\n      links.push({ source: src, target: targetId });\n    }\n    if (rightChildInd < sp.length) {\n      const targetId = rightChildInd + \" index\";\n      // link child node\n      const tNode = new TreeNode(targetId);\n      idToNode[targetId] = tNode;\n      idToNode[src].children.push(tNode);\n      tNode.isRightChild = true;\n\n      links.push({ source: src, target: targetId });\n    }\n  }\n  return {\n    startNode: root,\n    tree: idToNode[root as string],\n    idToTreeNode: idToNode,\n    nodeSet: nodeSet,\n    nodeToLabel: nodeToLabel,\n    links: links\n  };\n}\n\n// Leetcode's binary tree serialization\n// (modified bfs; see https://support.leetcode.com/hc/en-us/articles/360011883654-What-does-1-null-2-3-mean-in-binary-tree-representation-)\n// differentiate between id and label\nexport function parseLeetcodeTree(config: { input: string }) {\n  let { input } = config;\n  input = input.trim();\n  if (input.length < 2) {\n    throw new Error(\"Input too short\");\n  }\n  input = input.slice(1, input.length - 1);\n  input = input.trim();\n  if (input.length === 0) {\n    throw new Error(\"Input too short\");\n  }\n\n  const nodeSet = new Set<string>();\n  const nodeToLabel: any = {};\n  const links: Array<any> = [];\n\n  if (input.indexOf(\",\") === -1) {\n    nodeSet.add(input);\n    return { startNode: input, nodeSet: nodeSet, links: links };\n  }\n\n  const idToNode: any = {};\n  let sp = input.split(\",\");\n  sp = sp.map((elem, ind) => {\n    let trimmed = cleanseInput(elem);\n    let key = ind + \" index\";\n    if (trimmed !== \"null\") {\n      nodeSet.add(key);\n      const tNode = new TreeNode(key);\n      idToNode[key] = tNode;\n      nodeToLabel[key] = trimmed;\n    }\n    return elem.trim();\n  });\n\n  let queue = []; // queue.shift() to dequeue\n  queue.push(\"0 index\");\n  let ind = 1;\n  while (queue.length > 0) {\n    let src = queue.shift();\n    if (ind >= sp.length) break;\n    let trg = sp[ind];\n    if (trg !== \"null\") {\n      // left child\n      // connect and add to queue\n      trg = ind + \" index\";\n\n      idToNode[src as string].children.push(idToNode[trg]);\n      links.push({ source: src, target: trg });\n      queue.push(trg);\n    }\n    ind++;\n    if (ind >= sp.length) break;\n    trg = sp[ind];\n    if (trg !== \"null\") {\n      // right child\n      trg = ind + \" index\";\n\n      idToNode[src as string].children.push(idToNode[trg]);\n      idToNode[trg].isRightChild = true;\n      links.push({ source: src, target: trg });\n      queue.push(trg);\n    }\n    ind++;\n  }\n\n  return {\n    startNode: \"0 index\",\n    tree: idToNode[\"0 index\"],\n    idToTreeNode: idToNode,\n    nodeSet: nodeSet,\n    nodeToLabel: nodeToLabel,\n    links: links\n  };\n}\n\nexport function parseNodes(input: string) {\n  const nodeSet = new Set<string>();\n  input = input.trim();\n  if (input.length < 2) {\n    throw new Error(\"Input too short\");\n  }\n  input = input.slice(1, input.length - 1);\n  input = input.trim();\n  if (input.length === 0) {\n    return nodeSet;\n  }\n  if (input.indexOf(\",\") === -1) {\n    nodeSet.add(cleanseInput(input));\n    return nodeSet;\n  }\n  const sp = input.split(\",\");\n  for (let s of sp) {\n    s = cleanseInput(s);\n    if (s.length) nodeSet.add(s);\n  }\n  return nodeSet;\n}\n","import React from \"react\";\nimport { Button, Tooltip } from \"@material-ui/core\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport { Help as HelpIcon } from \"@material-ui/icons\";\n\nexport const LabelWithTooltip = ({\n    tooltipText,\n    label,\n    inputRef\n}: {\n    tooltipText: string;\n    label: string;\n    inputRef: React.RefObject<HTMLInputElement>;\n}) => {\n    return (\n        <div\n            onClick={() => {\n                if (inputRef && inputRef.current) {\n                    inputRef.current.focus();\n                }\n            }}\n        >\n            {label}\n            <Tooltip\n                style={{ height: \"20px\", margin: \"0px 0px -4px 4px\" }}\n                title={tooltipText}\n                placement=\"right\"\n            >\n                <HelpIcon />\n            </Tooltip>\n        </div>\n    );\n};\n\nconst lightGreen = \"#81c784\";\nconst green = \"#4caf50\";\nconst lightGrey = \"#eeeeee\";\n\nexport const ColorButton = withStyles(theme => ({\n    root: {\n        color: theme.palette.getContrastText(lightGrey),\n        backgroundColor: lightGrey,\n        \"&:hover\": {\n            backgroundColor: lightGreen\n        }\n    }\n}))(Button);\n\nexport const SelectedButton = withStyles(theme => ({\n    root: {\n        color: theme.palette.getContrastText(green),\n        backgroundColor: green,\n        \"&:hover\": {\n            backgroundColor: green\n        }\n    }\n}))(Button);","import React from \"react\";\nimport clsx from \"clsx\";\nimport \"./App.css\";\nimport Graph from \"./graph/Graph\";\nimport * as ParseUtils from \"./parser/parseUtils\";\nimport { InputType, getLabel } from \"./parser/inputTypes\";\nimport { LayoutType, getLayoutLabel } from \"./layout/layoutTypes\";\nimport {\n  FormControl,\n  MenuItem,\n  InputLabel,\n  Select,\n  AppBar,\n  Drawer,\n  Toolbar,\n  Divider,\n  IconButton,\n  Typography,\n  TextField,\n  FormControlLabel,\n  Checkbox,\n  Slider\n} from \"@material-ui/core\";\nimport { Autocomplete } from \"@material-ui/lab\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport { useStyles } from \"./styles/useStyles\";\nimport { Menu as MenuIcon, ChevronLeft as ChevronLeftIcon } from \"@material-ui/icons\";\nimport { LabelWithTooltip, ColorButton, SelectedButton } from \"./utils/helperComponents\";\nimport { TreeNode } from \"./layout/treeLayout\";\nimport SearchBar from \"material-ui-search-bar\";\n\nconst DEFAULT_INPUT_TYPE = InputType.AdjacencyList;\nconst DEFAULT_LAYOUT_TYPE = LayoutType.Tree;\nconst DEFAULT_GRAPH_INPUT = ``;\n\nexport type MyGraphNodeType = { id: string; label: string; x?: number; y?: number };\nexport type MyGraphLinkType = { source: string; target: string; label?: string };\nexport type MyDataType = {\n  nodes: Array<MyGraphNodeType>;\n  links: Array<MyGraphLinkType>;\n  startNode?: string;\n  directed?: boolean;\n  tree?: TreeNode;\n  idToTreeNode?: { [key: string]: TreeNode };\n};\n\nfunction App() {\n  const classes = useStyles();\n  // layout\n  const [drawerOpen, setDrawerOpen] = React.useState(true);\n\n  // input data\n  const [inputValue, setInputValue] = React.useState(DEFAULT_GRAPH_INPUT);\n  const [comboValue, setComboValue] = React.useState(DEFAULT_INPUT_TYPE);\n  const [directed, setDirected] = React.useState(true);\n  const [oneIndexed, setOneIndexed] = React.useState(false); // used for adjacency lists\n  const [reverseEdges, setReverseEdges] = React.useState(false); // used for edge pairs\n  const [customNodes, setCustomNodes] = React.useState(DEFAULT_GRAPH_INPUT);\n\n  const [allNodes, setAllNodes] = React.useState<Array<string>>([]);\n  const [startNode, setStartNode] = React.useState<string | null>(null);\n\n  // error handling\n  const [graphInputError, setGraphInputError] = React.useState(\"\");\n  const [customNodesInputError, setCustomNodesInputError] = React.useState(\"\");\n\n  // graph payload (with minimalist structure)\n  const [customNodeSet, setCustomNodeSet] = React.useState(new Set<string>());\n  const [data, setData] = React.useState<MyDataType>({\n    nodes: [],\n    links: []\n  });\n\n  // layout\n  const [selectedLayout, setSelectedLayout] = React.useState(DEFAULT_LAYOUT_TYPE);\n  const [searchInputValue, setSearchInputValue] = React.useState(\"\");\n  const [searchText, setSearchText] = React.useState(\"\");\n\n  const graphInputRef = React.useRef<any>();\n  const customNodesInputRef = React.useRef<any>();\n  const reverseRef = React.useRef(false);\n\n  const [verticalSlider, setVerticalSlider] = React.useState<number>(2);\n  const [horizontalSlider, setHorizontalSlider] = React.useState<number>(2);\n\n  // handle changes to graph input, input type, associated options (i.e. 1-indexed)\n  React.useEffect(() => {\n    if (!inputValue) return;\n\n    let parsedValue: any;\n    try {\n      parsedValue = ParseUtils.processInput(inputValue, comboValue, {\n        oneIndexed,\n        reverseEdges\n      });\n\n      if (parsedValue.nodeSet.size === 0) {\n        setGraphInputError(\"There are no valid nodes in the input.\");\n        return;\n      }\n    } catch (error) {\n      setGraphInputError(error.message);\n      return;\n    }\n\n    let reverseChanged = false;\n    if (reverseEdges !== reverseRef.current) {\n      reverseChanged = true;\n      reverseRef.current = reverseEdges;\n    }\n\n    const nodeToLabel = parsedValue.nodeToLabel ? parsedValue.nodeToLabel : {};\n\n    parsedValue.nodes = Array.from(parsedValue.nodeSet).map(nodeId => {\n      return {\n        id: nodeId as string,\n        label: nodeToLabel.hasOwnProperty(nodeId) ? nodeToLabel[nodeId as string] : nodeId\n      };\n    });\n    if (parsedValue.startNode) {\n      setStartNode(parsedValue.startNode);\n    } else {\n      if (!reverseChanged) {\n        setStartNode(null);\n      }\n    }\n\n    setGraphInputError(\"\");\n    setData(parsedValue);\n  }, [inputValue, comboValue, oneIndexed, reverseEdges]);\n\n  // handle changes to custom nodes input ()\n  React.useEffect(() => {\n    if (!customNodes) return;\n\n    let parsedValue: Set<string>;\n    try {\n      parsedValue = ParseUtils.parseNodes(customNodes);\n    } catch (ex) {\n      setCustomNodesInputError(ex.message);\n      return;\n    }\n    setCustomNodesInputError(\"\");\n    setCustomNodeSet(parsedValue);\n  }, [customNodes]);\n\n  React.useEffect(() => {\n    let allNodesSet = new Set();\n    for (let n of data.nodes) {\n      allNodesSet.add(n.id);\n    }\n    for (let nodeId of Array.from(customNodeSet)) {\n      allNodesSet.add(nodeId);\n    }\n    let tempAllNodes = Array.from(allNodesSet) as Array<string>;\n    tempAllNodes.sort();\n\n    setAllNodes(tempAllNodes);\n  }, [customNodeSet, data]);\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <AppBar\n        position=\"fixed\"\n        className={clsx(classes.appBar, {\n          [classes.appBarShift]: drawerOpen\n        })}\n      >\n        <Toolbar>\n          <IconButton\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            onClick={() => {\n              setDrawerOpen(true);\n            }}\n            edge=\"start\"\n            className={clsx(classes.menuButton, drawerOpen && classes.hide)}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" noWrap>\n            Choose Layout Type:\n          </Typography>\n          {Object.keys(LayoutType)\n            .filter(k => typeof LayoutType[k as any] !== \"number\")\n            .map(key => {\n              let currLayoutType = parseInt(key);\n              return currLayoutType === selectedLayout ? (\n                <SelectedButton\n                  key={key}\n                  className={classes.layoutButton}\n                  variant=\"contained\"\n                  onClick={() => {\n                    setSelectedLayout(currLayoutType);\n                  }}\n                >\n                  {getLayoutLabel(parseInt(key))}\n                </SelectedButton>\n              ) : (\n                <ColorButton\n                  key={key}\n                  className={classes.layoutButton}\n                  variant=\"contained\"\n                  onClick={() => {\n                    setSelectedLayout(currLayoutType);\n                  }}\n                >\n                  {getLayoutLabel(parseInt(key))}\n                </ColorButton>\n              );\n            })}\n          <div className={classes.searchBar}>\n            <SearchBar\n              value={searchInputValue}\n              onChange={newValue => setSearchInputValue(newValue)}\n              onRequestSearch={() => setSearchText(searchInputValue)}\n              onCancelSearch={() => setSearchText(\"\")}\n              placeholder={\"Search Nodes\"}\n              style={{\n                width: 200,\n                height: 36\n              }}\n            />\n          </div>\n        </Toolbar>\n      </AppBar>\n      <Drawer\n        className={classes.drawer}\n        variant=\"persistent\"\n        anchor=\"left\"\n        open={drawerOpen}\n        classes={{\n          paper: classes.drawerPaper\n        }}\n      >\n        <div className={classes.drawerHeader}>\n          <Typography className={classes.drawerHeaderText} variant=\"h6\" noWrap>\n            Graph Input\n          </Typography>\n          <IconButton\n            onClick={() => {\n              setDrawerOpen(false);\n            }}\n          >\n            <ChevronLeftIcon />\n          </IconButton>\n        </div>\n        <div>\n          <Divider />\n          <FormControl className={classes.formControl}>\n            <TextField\n              InputLabelProps={{ style: { pointerEvents: \"auto\" } }}\n              label={\n                <LabelWithTooltip\n                  label={\"Graph Input\"}\n                  tooltipText={\"Enter the text representation of the graph.\"}\n                  inputRef={graphInputRef}\n                />\n              }\n              inputRef={graphInputRef}\n              placeholder=\"Please enter graph input.\"\n              multiline\n              rows={3}\n              rowsMax={10}\n              variant=\"outlined\"\n              value={inputValue}\n              onChange={event => {\n                setInputValue(event.target.value);\n              }}\n              error={graphInputError.length > 0}\n              helperText={graphInputError}\n            />\n          </FormControl>\n          <FormControl className={classes.formControl}>\n            <InputLabel id=\"graph-input-type-label\">Input Type</InputLabel>\n            <Select\n              labelId=\"graph-input-type-label\"\n              id=\"graph-input-type\"\n              value={comboValue}\n              className={classes.selectEmpty}\n              variant=\"outlined\"\n              onChange={e => {\n                setComboValue(parseInt(e.target.value as string));\n              }}\n            >\n              {Object.keys(InputType)\n                .filter(k => typeof InputType[k as any] !== \"number\")\n                .sort((a, b) => getLabel(parseInt(a)).localeCompare(getLabel(parseInt(b))))\n                .map(key => (\n                  <MenuItem key={key} value={key}>\n                    {getLabel(parseInt(key))}\n                  </MenuItem>\n                ))}\n            </Select>\n          </FormControl>\n          {comboValue === InputType.AdjacencyList && (\n            <FormControlLabel\n              className={classes.formControlLabel}\n              control={\n                <Checkbox\n                  checked={oneIndexed}\n                  onChange={e => setOneIndexed(!oneIndexed)}\n                  name=\"oneIndexedValue\"\n                  color=\"primary\"\n                />\n              }\n              label=\"1-indexed\"\n            />\n          )}\n          {comboValue === InputType.EdgePairs && (\n            <FormControlLabel\n              className={classes.formControlLabel}\n              control={\n                <Checkbox\n                  checked={reverseEdges}\n                  onChange={e => setReverseEdges(!reverseEdges)}\n                  name=\"reverseValue\"\n                  color=\"primary\"\n                />\n              }\n              label=\"Reverse\"\n            />\n          )}\n          <FormControlLabel\n            className={classes.formControlLabel}\n            control={\n              <Checkbox\n                checked={directed}\n                onChange={e => setDirected(!directed)}\n                name=\"directedValue\"\n                color=\"primary\"\n              />\n            }\n            label=\"Directed\"\n          />\n          <FormControl className={classes.formControl}>\n            <Autocomplete\n              options={allNodes}\n              value={startNode && startNode.length > 0 ? startNode : null}\n              onChange={(event: React.ChangeEvent<{}>, newValue: string | null) => {\n                if (newValue) setStartNode(newValue);\n              }}\n              renderInput={(params: any) => (\n                <TextField {...params} label=\"Start Node\" margin=\"normal\" variant=\"outlined\" />\n              )}\n            />\n          </FormControl>\n          <FormControl className={classes.formControl}>\n            <TextField\n              InputLabelProps={{ style: { pointerEvents: \"auto\" } }}\n              label={\n                <LabelWithTooltip\n                  label={\"Custom Node List\"}\n                  tooltipText={\n                    \"(Optional) Specify if the set of nodes is described in a separate list from the edges.\"\n                  }\n                  inputRef={customNodesInputRef}\n                />\n              }\n              inputRef={customNodesInputRef}\n              placeholder=\"Enter custom node set here.\"\n              multiline\n              rows={3}\n              rowsMax={10}\n              variant=\"outlined\"\n              value={customNodes}\n              onChange={event => {\n                setCustomNodes(event.target.value);\n              }}\n              error={customNodesInputError.length > 0}\n              helperText={customNodesInputError}\n            />\n          </FormControl>\n        </div>\n      </Drawer>\n      <main\n        className={clsx(classes.mainContent, {\n          [classes.contentShift]: drawerOpen\n        })}\n      >\n        <div className={classes.drawerHeader} />\n        <Graph\n          id=\"graph-id\" // id is mandatory, if no id is defined rd3g will throw an error\n          inputType={comboValue}\n          directed={directed}\n          customNodes={customNodeSet}\n          startNode={startNode}\n          data={data}\n          selectedLayout={selectedLayout}\n          drawerOpen={drawerOpen}\n          searchText={searchText}\n          horizontalSpacing={horizontalSlider}\n          verticalSpacing={verticalSlider}\n        />\n        <div className={classes.sliders}>\n          {selectedLayout !== LayoutType.ForceLayout && selectedLayout !== LayoutType.Random && (\n            <>\n              <Typography id=\"continuous-slider\" gutterBottom>\n                Horizontal Spacing\n              </Typography>\n              <Slider\n                value={horizontalSlider}\n                onChange={(event, newValue) => {\n                  setHorizontalSlider(newValue as number);\n                }}\n                aria-labelledby=\"discrete-slider\"\n                step={1}\n                marks\n                min={0}\n                max={4}\n              />\n            </>\n          )}\n          {selectedLayout !== LayoutType.ForceLayout &&\n            selectedLayout !== LayoutType.Random &&\n            selectedLayout !== LayoutType.Arc && (\n              <>\n                <Typography id=\"continuous-slider\" gutterBottom>\n                  Vertical Spacing\n                </Typography>\n                <Slider\n                  value={verticalSlider}\n                  onChange={(event, newValue) => {\n                    setVerticalSlider(newValue as number);\n                  }}\n                  aria-labelledby=\"discrete-slider\"\n                  step={1}\n                  marks\n                  min={0}\n                  max={4}\n                />\n              </>\n            )}\n        </div>\n      </main>\n    </div >\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}